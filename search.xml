<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>零撸openai120刀教程 带土耳其入金方法.md</title>
      <link href="/posts/61903346.html"/>
      <url>/posts/61903346.html</url>
      
        <content type="html"><![CDATA[<p><strong>原理</strong>：土耳其钱包Oldubli注册后自动开通一张每月1250里拉限额的10年有效期万事达（master）虚拟卡，无需任何KYC。OpenAI绑定信用卡并扣除5美刀预授权额度后将提高账户消费额度为120美刀&#x2F;月，所以并不是真正的赠送120美刀余额，只是将账户升级为即用即付（Pay As You Go）且限制消费为120美刀的账户。</p><p>至于Oldubli如何入金，可以使用wise 或者万能淘宝<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305082213307.jpeg" alt="img"><br><strong>重点</strong>：OpenAI扣除的5美刀仅为预授权额度，得益于土耳其的落后系统以及虚拟信用卡的特性，在为此万事达（master）虚拟卡充值5美刀（考虑到汇损我一般入金115土耳其里拉按照2023.04.22汇率 115里拉为5.9美元)后，短时间内扣除5美刀预授权的操作不会秒级别的应用到此账户。 说人话：冲5刀进去 可以30min-1h内无限扣除5刀预授权，意思为你只要手速快，用这张只充值了115里拉的卡能绑起码2-4个OpenAI账户…..等30min-1h内土佬的系统把此额度应用了才会失效….so….</p><p><strong>重点中的重点</strong>：30min-1h后5刀额度被真正应用后就无法骚操作了，但是就算到这一步，你的5美刀（115里拉）依然没有消失，依然在你的万事达卡中，依然可以真实的花出去！！！所以撸完了OpenAI120美金后是用其继续开土耳其netflix还是充值这5美金到linode账户还是你继续撸aws等等….就都随你了</p><p><strong>注意事项</strong>：Oldubli在google 商店和apple商店（外区）均可下载，但需美国IP或土耳其IP访问，否则报错！<br>Oldubli目前仅乌克兰手机号、土耳其手机号、阿塞拜疆手机号可以正常收验证码注册。这里提供一个应用：SafeUM 同样可以在两个商店下载到，注册后获得一个拉脱维亚或阿塞拜疆虚拟号，这个号码完全属于你，看广告可以继续续期！<br>SO:获得到的阿塞拜疆手机号还能注册验证OpenAI账户，这下真连账号成本都没有了</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> openai </tag>
            
            <tag> chatGPT </tag>
            
            <tag> 零撸 </tag>
            
            <tag> 入金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Chrome使用New Bing聊天</title>
      <link href="/posts/bfd72768.html"/>
      <url>/posts/bfd72768.html</url>
      
        <content type="html"><![CDATA[<p>在之前New Bing公测的时候，博主就对其感兴趣了。不过由于微软的某些原因，我迟迟没有等到内测的名额。好在最近几天，New Bing向所有用户开放了，我才得以使用其进行聊天。而且流畅度比ChatGPT好多了。但是有个缺点就是只能在Edge浏览器上使用。在这期文章中，我来和大家一起突破微软的限制，在Chrome浏览器使用New Bing</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Chrome 浏览器</li><li>微软账户（可选）</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>1.打开这个插件的下载链接：<br><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-and-m/bhchdcejhohfmigjafbampogmaanbfkg">https://chrome.google.com/webstore/detail/user-agent-switcher-and-m/bhchdcejhohfmigjafbampogmaanbfkg</a><br>然后点击“添加至Chrome”按钮，进行插件安装</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639869.png" alt="img"></p><p>2.按照下图指示，设置UA</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639654.png" alt="img"></p><p>3.点击“Test UA”按钮，测试UA。当看到和插件设置的UA一样的时候即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639049.png" alt="img"></p><p>4.随意问一个问题，可以看到是和在Edge一样是正常使用的</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639827.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/05/05/newbing-chrome/">https://blog.misaka.rest/2023/05/05/newbing-chrome/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> edge </tag>
            
            <tag> chrome </tag>
            
            <tag> chatgpt </tag>
            
            <tag> bing </tag>
            
            <tag> new </tag>
            
            <tag> 必应 </tag>
            
            <tag> 聊天 </tag>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助Cloudflare Argo Tunnel隧道，在PaaS容器云平台部署哪吒探针</title>
      <link href="/posts/61d5747e.html"/>
      <url>/posts/61d5747e.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>GitHub 账户</li><li>CloudFlare 账户，并准备一个域名</li><li>PaaS 容器云账户（以下使用Koyeb为演示平台）</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>1.打开F佬的CF Argo Tunnel生成网：<a href="https://fscarmen.cloudflare.now.cc/">https://fscarmen.cloudflare.now.cc</a> ，按照下图步骤获取隧道信息</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337368.png" alt="img"></p><p>2.进入CloudFlare控制台，在相应的域名 DNS 记录里加上客户端上报数据(tcp)和 ssh（可选）的域名，打开小云朵以启用 CDN</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271341472.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337405.png" alt="img"></p><p>3.转到 网络 选项，将 gRPC 开关打开</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271341157.png" alt="img"></p><p>4.设置新的OAuth授权应用，打开：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> ，设置应用程序。面板域名加上 <code>https://</code> 开头，回调地址再加上 <code>/oauth2/callback</code> 结尾</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337360.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337006.png" alt="img"></p><p>5.获取 GitHub 的 PAT (Personal Access Token): <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337808.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337879.png" alt="img"></p><p>6.创建 GitHub 用于备份的私库: <a href="https://github.com/new">https://github.com/new</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337015.png" alt="img"></p><p>7.打开Koyeb，创建一个新的APP。类型选择Docker</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271342115.png" alt="img"></p><p>8.输入镜像名称：<code>fscarmen/argo-nezha:latest</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271342422.png" alt="img"></p><p>9.按照下图设置，下表为参考变量</p><table><thead><tr><th>变量名</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>GH_USER</td><td>是</td><td>github 的用户名，用于面板管理授权</td></tr><tr><td>GH_CLIENTID</td><td>是</td><td>在 github 上申请</td></tr><tr><td>GH_CLIENTSECRET</td><td>是</td><td>在 github 上申请</td></tr><tr><td>GH_REPO</td><td>否</td><td>在 github 上备份哪吒服务端数据库文件的库</td></tr><tr><td>GH_EMAIL</td><td>否</td><td>github 的邮箱，用于备份的 git 推送到远程库</td></tr><tr><td>GH_PAT</td><td>否</td><td>github 的 PAT</td></tr><tr><td>ARGO_JSON</td><td>是</td><td>从 <a href="https://fscarmen.cloudflare.now.cc/">https://fscarmen.cloudflare.now.cc</a> 获取的 Argo Json</td></tr><tr><td>DATA_DOMAIN</td><td>是</td><td>客户端与服务端的通信 argo 域名</td></tr><tr><td>WEB_DOMAIN</td><td>是</td><td>面板 argo 域名</td></tr><tr><td>SSH_DOMAIN</td><td>否</td><td>ssh 用的 argo 域名</td></tr><tr><td>SSH_PASSWORD</td><td>否</td><td>ssh 的密码，只有在设置 SSH_JSON 后才生效，默认值 password</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271342525.png" alt="img"></p><p>10.等待1-2分钟，待出现Healthy即为成功部署。这时可以使用Argo的域名或者是PaaS平台的域名访问探针面板</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337598.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271423291.png" alt="img"></p><h2 id="VPS-部署实例"><a href="#VPS-部署实例" class="headerlink" title="VPS 部署实例"></a>VPS 部署实例</h2><ul><li>注意: ARGO_JSON&#x3D; 后面需要有单引号，不能去掉</li><li>如果 VPS 是 IPv6 only 的，请先安装 WARP IPv4 或者双栈: <a href="https://github.com/fscarmen/warp">https://github.com/fscarmen/warp</a></li><li>备份目录为当前路径的 dashboard 文件夹</li></ul><h3 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">           --name nezha_dashboard \</span><br><span class="line">           --restart always \</span><br><span class="line">           -e GH_USER=&lt;填 github 用户名&gt; \</span><br><span class="line">           -e GH_EMAIL=&lt;填 github 邮箱&gt; \</span><br><span class="line">           -e GH_PAT=&lt;填获取的&gt; \</span><br><span class="line">           -e GH_REPO=&lt;填自定义的&gt; \</span><br><span class="line">           -e GH_CLIENTID=&lt;填获取的&gt;  \</span><br><span class="line">           -e GH_CLIENTSECRET=&lt;填获取的&gt; \</span><br><span class="line">           -e ARGO_JSON=&#x27;&lt;填获取的&gt;&#x27; \</span><br><span class="line">           -e WEB_DOMAIN=&lt;填自定义的&gt; \</span><br><span class="line">           -e DATA_DOMAIN=&lt;填自定义的&gt; \</span><br><span class="line">           -e SSH_DOMAIN=&lt;填自定义的&gt; \</span><br><span class="line">           -e SSH_PASSWORD=&lt;填自定义的&gt; \</span><br><span class="line">           fscarmen/argo-nezha</span><br></pre></td></tr></table></figure><h3 id="docker-compose-部署"><a href="#docker-compose-部署" class="headerlink" title="docker-compose 部署"></a>docker-compose 部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line">services:</span><br><span class="line">    argo-nezha:</span><br><span class="line">        image: fscarmen/argo-nezha</span><br><span class="line">        container_name: nezha_dashboard</span><br><span class="line">        restart: always</span><br><span class="line">        environment:</span><br><span class="line">            - GH_USER=&lt;填 github 用户名&gt;</span><br><span class="line">            - GH_EMAIL=&lt;&lt;填 github 邮箱&gt;</span><br><span class="line">            - GH_PAT=&lt;填获取的&gt;</span><br><span class="line">            - GH_REPO=&lt;填自定义的&gt;</span><br><span class="line">            - GH_CLIENTID=&lt;填获取的&gt;</span><br><span class="line">            - GH_CLIENTSECRET=&lt;填获取的&gt;</span><br><span class="line">            - ARGO_JSON=&#x27;&lt;填获取的&gt;&#x27;</span><br><span class="line">            - WEB_DOMAIN=&lt;填自定义的&gt;</span><br><span class="line">            - DATA_DOMAIN=&lt;填自定义的&gt;</span><br><span class="line">            - SSH_DOMAIN=&lt;填自定义的&gt;</span><br><span class="line">            - SSH_PASSWORD=&lt;填自定义的&gt;</span><br></pre></td></tr></table></figure><h2 id="客户端接入"><a href="#客户端接入" class="headerlink" title="客户端接入"></a>客户端接入</h2><p>通过gRPC传输，无需额外配置。使用面板给到的安装方式，举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh &amp;&amp; sudo ./nezha.sh install_agent data.seales.nom.za 443 eAxO9IF519fKFODlW0 --tls</span><br></pre></td></tr></table></figure><h2 id="SSH-接入"><a href="#SSH-接入" class="headerlink" title="SSH 接入"></a>SSH 接入</h2><ul><li>以 macOS + WindTerm 为例，其他根据使用的 SSH 工具，结合官方官方说明文档: <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/use_cases/ssh/#2-connect-as-a-user">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/use_cases/ssh/#2-connect-as-a-user</a></li><li>官方 cloudflared 下载: <a href="https://github.com/cloudflare/cloudflared/releases">https://github.com/cloudflare/cloudflared/releases</a></li><li>以下输入命令举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;file path&gt;/cloudflared access ssh --hostname ssh.seales.nom.za</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271425791.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271423316.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271424294.png" alt="img"></p><h2 id="自动还原备份"><a href="#自动还原备份" class="headerlink" title="自动还原备份"></a>自动还原备份</h2><ul><li>把需要还原的文件名改到 github 备份库里的 <code>README.md</code>，定时服务会每分钟检测更新，并把上次同步的文件名记录在本地 <code>/dbfile</code> 处以与在线的文件内容作比对</li></ul><p>下图为以还原文件名为 <code>dashboard-2023-04-23-13:08:37.tar.gz</code> 作示例</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271423301.png" alt="img"></p><h2 id="手动还原备份"><a href="#手动还原备份" class="headerlink" title="手动还原备份"></a>手动还原备份</h2><ul><li>ssh 进入容器后运行，github 备份库里的 tar.gz 文件名，格式: dashboard-2023-04-22-21:42:10.tar.gz</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /dashboard/restore.sh &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271424279.png" alt="img"></p><h2 id="完美搬家"><a href="#完美搬家" class="headerlink" title="完美搬家"></a>完美搬家</h2><ul><li>备份原哪吒的 <code>/dashboard</code> 文件夹，压缩备份为 <code>dashboard.tar.gz</code> 文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czvf dashboard.tar.gz /dashboard</span><br></pre></td></tr></table></figure><ul><li>下载文件并放入私库，这个私库名要与新哪吒 <GH_REPO> 完全一致，并把该库的 README.md 的内容编辑为 <code>dashboard.tar.gz</code></li><li>部署本项目新哪吒，完整填入变量即可。部署完成后，自动还原脚本会每分钟作检测，发现有新的内容即会自动还原，全程约 3 分钟</li></ul><h2 id="主体目录文件及说明"><a href="#主体目录文件及说明" class="headerlink" title="主体目录文件及说明"></a>主体目录文件及说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- dashboard</span><br><span class="line">|   |-- app                  # 哪吒面板主程序</span><br><span class="line">|   |-- argo.json            # Argo 隧道 json 文件，记录着使用隧道的信息</span><br><span class="line">|   |-- argo.yml             # Argo 隧道 yml 文件，用于在一同隧道下，根据不同域名来分流 web, gRPC 和 ssh 协议的作用</span><br><span class="line">|   |-- backup.sh            # 备份数据脚本</span><br><span class="line">|   |-- data</span><br><span class="line">|   |   |-- config.yaml      # 哪吒面板的配置，如 Github OAuth2 / gRPC 域名 / 端口 / 是否启用 TLS 等信息</span><br><span class="line">|   |   `-- sqlite.db        # SQLite 数据库文件，记录着面板设置的所有 severs 和 cron 等信息</span><br><span class="line">|   |-- entrypoint.sh        # 主脚本，容器运行后执行</span><br><span class="line">|   |-- nezha-agent          # 哪吒客户端，用于监控本地 localhost</span><br><span class="line">|   |-- nezha.csr            # SSL/TLS 证书签名请求</span><br><span class="line">|   |-- nezha.key            # SSL/TLS 证书的私钥信息</span><br><span class="line">|   |-- nezha.pem            # SSL/TLS 隐私增强邮件</span><br><span class="line">|   `-- restore.sh           # 还原备份脚本</span><br><span class="line">`-- dbfile                   # 记录最新的还原或备份文件名</span><br></pre></td></tr></table></figure><h2 id="鸣谢下列作者的文章和项目"><a href="#鸣谢下列作者的文章和项目" class="headerlink" title="鸣谢下列作者的文章和项目:"></a>鸣谢下列作者的文章和项目:</h2><ul><li>热心的朝阳群众 Robin，讨论哪吒服务端与客户端的关系，从而诞生了此项目</li><li>哪吒官网: <a href="https://nezha.wiki/">https://nezha.wiki/</a> , TG 群: <a href="https://t.me/nezhamonitoring">https://t.me/nezhamonitoring</a></li><li>共穷国际老中医: <a href="http://solitud.es/">http://solitud.es/</a></li><li>Akkia’s Blog: <a href="https://blog.akkia.moe/">https://blog.akkia.moe/</a></li><li>HiFeng’s Blog: <a href="https://www.hicairo.com/">https://www.hicairo.com/</a></li><li>用 Cloudflare Tunnel 进行内网穿透: <a href="https://blog.outv.im/2021/cloudflared-tunnel/">https://blog.outv.im/2021/cloudflared-tunnel/</a></li></ul><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明:"></a>免责声明:</h2><ul><li>本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。</li><li>使用本程序必循遵守部署免责声明。使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><blockquote><p><a href="https://github.com/fscarmen2/Argo-Nezha-Service-Container">https://github.com/fscarmen2/Argo-Nezha-Service-Container</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> argo </tag>
            
            <tag> tunnel </tag>
            
            <tag> 教程 </tag>
            
            <tag> cf </tag>
            
            <tag> paas </tag>
            
            <tag> 容器 </tag>
            
            <tag> 容器云 </tag>
            
            <tag> 哪吒 </tag>
            
            <tag> 探针 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国各个地区Google Voice号段地图</title>
      <link href="/posts/7b32c8fe.html"/>
      <url>/posts/7b32c8fe.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260925649.png" alt="img"></p><p>各州包含号段介绍（号码前三位为所在州号段）</p><table><thead><tr><th><strong>美国州</strong></th><th><strong>包含电话号段（Google Voice 前三位）</strong></th></tr></thead><tbody><tr><td>Alabama (AL) 阿拉巴马州</td><td>205, 251, 256, 334, 938</td></tr><tr><td>Alaska (AK) 阿拉斯加州</td><td>907</td></tr><tr><td>Arizona (AZ) 亚利桑那州</td><td>480, 520, 602, 623, 928</td></tr><tr><td>Arkansas (AR) 阿肯色州</td><td>479, 501, 870</td></tr><tr><td>California (CA) 加利福尼亚州</td><td>209, 213, 279, 310, 323, 341, 408, 415, 424, 442, 510, 530, 559, 562, 619, 626, 628, 650, 657, 661, 669, 707, 714, 747, 760, 805, 818, 820, 831, 858, 909, 916, 925, 949, 951</td></tr><tr><td>Colorado (CO) 科罗拉多州</td><td>303, 719, 720, 970</td></tr><tr><td>Connecticut (CT) 康涅狄格州</td><td>203, 475, 860, 959</td></tr><tr><td>Delaware (DE) 特拉华州</td><td>302</td></tr><tr><td>Florida (FL) 佛罗里达州</td><td>239, 305, 321, 352, 386, 407, 561, 727, 754, 772, 786, 813, 850, 863, 904, 941, 954</td></tr><tr><td>Georgia (GA) 乔治亚州</td><td>229, 404, 470, 478, 678, 706, 762, 770, 912</td></tr><tr><td>Hawaii (HI) 夏威夷州</td><td>808</td></tr><tr><td>Idaho (ID) 爱华达州</td><td>208, 986</td></tr><tr><td>Illinois (IL) 伊利诺伊州</td><td>217, 224, 309, 312, 331, 618, 630, 708, 773, 779, 815, 847, 872</td></tr><tr><td>Indiana (IN) 印第安那州</td><td>219, 260, 317, 463, 574, 765, 812, 930</td></tr><tr><td>Iowa (IA) 爱荷华州</td><td>319, 515, 563, 641, 712</td></tr><tr><td>Kansas (KS) 堪萨斯州</td><td>316, 620, 785, 913</td></tr><tr><td>Kentucky (KY) 肯塔基州</td><td>270, 364, 502, 606, 859</td></tr><tr><td>Louisiana (LA) 路易斯安那州</td><td>225, 318, 337, 504, 985</td></tr><tr><td>Maine (ME) 缅因州</td><td>207</td></tr><tr><td>Maryland (MD) 马里兰州</td><td>240, 301, 410, 443, 667</td></tr><tr><td>Massachusetts (MA) 马萨诸塞州</td><td>339, 351, 413, 508, 617, 774, 781, 857, 978</td></tr><tr><td>Michigan (MI) 密歇根州</td><td>231, 248, 269, 313, 517, 586, 616, 734, 810, 906, 947, 989</td></tr><tr><td>Minnesota (MN) 明尼苏达州</td><td>218, 320, 507, 612, 651, 763, 952</td></tr><tr><td>Mississippi (MS) 密西西比州</td><td>228, 601, 662, 769</td></tr><tr><td>Missouri (MO) 密苏里州</td><td>314, 417, 573, 636, 660, 816</td></tr><tr><td>Montana (MT) 蒙大拿州</td><td>406</td></tr><tr><td>Nebraska (NE) 内布拉斯加州</td><td>308, 402, 531</td></tr><tr><td>Nevada (NV) 内华达州</td><td>702, 725, 775</td></tr><tr><td>New Hampshire (NH) 新罕布什尔州</td><td>603</td></tr><tr><td>New Jersey (NJ) 新泽西州</td><td>201, 551, 609, 640, 732, 848, 856, 862, 908, 973</td></tr><tr><td>New Mexico (NM) 新墨西哥州</td><td>505, 575</td></tr><tr><td>New York (NY) 纽约州</td><td>212, 315, 332, 347, 516, 518, 585, 607, 631, 646, 680, 716, 718, 838, 845, 914, 917, 929, 934</td></tr><tr><td>North Carolina (NC) 北卡罗来纳州</td><td>252, 336, 704, 743, 828, 910, 919, 980, 984</td></tr><tr><td>North Dakota (ND) 北达科他州</td><td>701</td></tr><tr><td>Ohio (OH) 俄亥俄州</td><td>216, 220, 234, 330, 380, 419, 440, 513, 567, 614, 740, 937</td></tr><tr><td>Oklahoma (OK) 奥克拉荷马州</td><td>405, 539, 580, 918</td></tr><tr><td>Oregon (OR) 俄勒冈州</td><td>458, 503, 541, 971</td></tr><tr><td>Pennsylvania (PA) 宾夕法尼亚州</td><td>215, 223, 267, 272, 412, 445, 484, 570, 610, 717, 724, 814, 878</td></tr><tr><td>Rhode Island (RI) 罗德岛州</td><td>401</td></tr><tr><td>South Carolina (SC) 南卡罗来纳州</td><td>803, 843, 854, 864</td></tr><tr><td>South Dakota (SD) 南达科他州</td><td>605</td></tr><tr><td>Tennessee (TN) 田纳西州</td><td>423, 615, 629, 731, 865, 901, 931</td></tr><tr><td>Texas (TX) 德克萨斯州</td><td>210, 214, 254, 281, 325, 346, 361, 409, 430, 432, 469, 512, 682, 713, 726, 737, 806, 817, 830, 832, 903, 915, 936, 940, 956, 972, 979</td></tr><tr><td>Utah (UT) 犹他州</td><td>385, 435, 801</td></tr><tr><td>Vermont (VT) 佛蒙特州</td><td>802</td></tr><tr><td>Virginia (VA) 弗吉尼亚州</td><td>276, 434, 540, 571, 703, 757, 804</td></tr><tr><td>Washington (WA) 华盛顿州</td><td>206, 253, 360, 425, 509, 564</td></tr><tr><td>Washington (DC) 华盛顿特区</td><td>202</td></tr><tr><td>West Virginia (WV) 西弗吉尼亚州</td><td>304, 681</td></tr><tr><td>Wisconsin (WI) 威斯康辛州</td><td>262, 414, 534, 608, 715, 920</td></tr><tr><td>Wyoming (WY) 怀俄明州</td><td>307</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美国 </tag>
            
            <tag> 地图 </tag>
            
            <tag> 区号 </tag>
            
            <tag> google </tag>
            
            <tag> voice </tag>
            
            <tag> gv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国五大免税州的邮编、电话区号</title>
      <link href="/posts/d7dfe87e.html"/>
      <url>/posts/d7dfe87e.html</url>
      
        <content type="html"><![CDATA[<p><strong>美国5大免税州是哪几个？</strong></p><blockquote><ol><li>阿拉斯加州（Alaska）首府：朱诺（Juneau）邮编：99850 电话区号：907</li><li>特拉华州（Delaware）邮编：19702 电话区号：302</li><li>蒙大拿州（Montana）城市：Marion邮编：26586  电话区号：406</li><li>新罕布什尔州（New Hampshire）城市：Fremont邮编：03044 电话区号：603</li><li>俄勒冈州（Oregon）城市：ANTELOPE 邮编：97001 电话区号：503 、 971</li></ol></blockquote><p>下面我们来盘点一下五大免税州的主要城市的邮编：</p><p><strong>一、阿拉斯加州（Alaska）主要城市的邮编</strong></p><p>1、朱诺（Juneau）</p><blockquote><p>邮编：99801,99802,99803,99811,99850</p></blockquote><p>2、安克雷奇邮编（Anchorage）：</p><blockquote><p>邮编：99501,99502,99503,99504,99507,99508,99509,99510,99511,99512,99513,99514,99515,99516,99517,99518,99519,99520,99521,99522,99523,99524,99525,99526,99527,99528,99529,99530,99531,99532,99533,99534,99535,99536,99537,99538,99539,9954099541,99542,99543,99544,99545,99546,99547,99548,99549,99550,99551,99552,99553,99554,99555,99556,99557,99558,99559,99560,99561,99562,99563,99564,99565,99566,99567,99568,99569,99570,99571,99572,99573,99574,99575,99576,99577,99578,99579,99580,99581,99582,99583,99584,99585,99586,99587,99588,99589,99590,99591,99592,99593,99594,99595,99596,99597,99598,99599,99695</p></blockquote><p>3、费尔班克斯（Fairbanks）</p><blockquote><p>邮编：99701,99706,99707,99708,99709,99710,99711,99712,99775,99790</p></blockquote><p><strong>二、特拉华州Delaware (DE)主要城市邮编</strong></p><p>1、多佛(Dover)</p><blockquote><p>邮编：19901,19903,19904-19906</p></blockquote><p>2、维明顿(Wilmington)</p><blockquote><p>邮编：19801-19810,19850,19880,19884-19887,19889-19899</p></blockquote><p>3、纽瓦克(Newark)</p><blockquote><p>邮编：19702,19711-19718,19725,19726</p></blockquote><p><strong>三、蒙大拿州（Montana）主要城市的邮编</strong></p><p>1、赫勒拿（Heldna）</p><blockquote><p>邮编：59601,59602,59604,59620,59623,59624,59625,59626</p></blockquote><p>2、比林斯（Billings）</p><blockquote><p>邮编：59101,59102,59103,59104,59105,59106,59107,59108,59111,59112,59114,59115,59116,59117</p></blockquote><p>3、密苏拉（Missoula）</p><blockquote><p>邮编：59801,59802,59803,59804,59806,59807,59808,59812</p></blockquote><p><strong>四、新罕不什尔州（New Hampshire）主要城市邮编</strong></p><p>1、曼彻斯特（Manchester）</p><blockquote><p>邮编：03101,03102,03103,03104,03105,03107,03108,03109,03111</p></blockquote><p>2、南雪（Nashua）</p><blockquote><p>邮编：03060,03061,03062,03063,03064</p></blockquote><p>3、朴茨茅斯（Portsmouth）</p><blockquote><p>邮编：03801,03802,03803,03804</p></blockquote><p><strong>五、俄勒冈州Oregon（OR）主要城市邮编</strong></p><p>1、沙连(Salem)</p><blockquote><p>邮编：97301,97302,97303,97304,97305,97306,97308,97309,97310,97311,97312,97313,97314</p></blockquote><p>2、波特兰(Portland)</p><blockquote><p>邮编：97201,97202,97203,97204,97205,97206,97207,97208,97209,97210,97211,97212,97213,97214,97215,97216,97217,97218,97219,97220,97221,97222,97223,97224,97225,97227,97228,97229,97230,97231,97232,97233,97236,97238,97239,97240,97242,97251,97253,97254,97255,97256,97258,97259,97266,97267,97268,97269,97271,97272,97280,97281,97282,97283,97286,97290,97291,97292,97293,97294,97296,97298,97299</p></blockquote><p>3、尤金(Eugene)</p><blockquote><p>邮编：97401,97402,97403,97404,97405,97408,97440</p></blockquote><p>4、科瓦利(Corvallis)</p><blockquote><p>邮编：97330,97331,97333,97339</p></blockquote><p><strong>附上一个免税州地址</strong></p><p>地址：11831 SW Riverwood Road, Portland OR 97219<br>城市：波特兰（Portland）<br>区号：503</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美国 </tag>
            
            <tag> 区号 </tag>
            
            <tag> 免税 </tag>
            
            <tag> 邮编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甲骨文oracle修改邮箱，修改管理员账号</title>
      <link href="/posts/a4530c38.html"/>
      <url>/posts/a4530c38.html</url>
      
        <content type="html"><![CDATA[<p>买的账号要素：1.<strong>甲骨文</strong>登录账号+密码 2.登录的邮箱+邮箱密码（比如<a href="mailto:abc321@gamil.com">abc321@gamil.com</a>）<br><strong>提醒</strong>：1.拿到邮箱和邮箱密码第一时间修改密码。2.登录所用邮箱的前半段即Tenant(abc321)<strong>必须牢记</strong>！完全修改完成后，只有这一段是登录需要使用到的。<br>正式开始<br>1、按卖家给你的信息，登录甲骨文，选择-身份与安全-用户。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260836390.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>2、创建新用户，牢记设置的用户名，添加自己的邮箱（要收取邮件的），重置获取一次性密码，添加新增用户进入admin管理组。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260836530.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835194.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835115.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>3、查看邮箱，点链接。使用新建用户登录,重置密码。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835134.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260836628.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835387.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835273.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>4、<strong>关键</strong>新号登录后，先在<strong>管理组</strong>内先删除老管理员账号，再从用户中删除老管理员账号。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260837863.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260841198.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>以上就完成了甲骨文账号修改替换，以后登录可以用每个分区的专属链接<br>比如：<br>首尔<br><a href="https://console.ap-seoul-1.oraclecloud.com/">https://console.ap-seoul-1.oraclecloud.com</a><br>春川<br><a href="https://console.ap-chuncheon-1.oraclecloud.com/">https://console.ap-chuncheon-1.oraclecloud.com</a><br>凤凰城<br><a href="https://console.us-phoenix-1.oraclecloud.com/">https://console.us-phoenix-1.oraclecloud.com</a><br>圣何塞<br><a href="https://console.us-sanjose-1.oraclecloud.com/">https://console.us-sanjose-1.oraclecloud.com</a><br>东京<br><a href="https://console.ap-tokyo-1.oraclecloud.com/">https://console.ap-tokyo-1.oraclecloud.com</a><br>或者统一登录地址<br><a href="https://cloud.oracle.com/">https://cloud.oracle.com</a><br>输入Tenant（原始邮箱@前半段）<br>然后输入你新建的用户名+密码就可以成功登录。</p><p>有楼层提到了租户里面改邮箱，那是以前的教程有一个叫“服务用户控制台”的选项，现在我的所有账号里都没有这个了，但是甲骨文的IDCS还是可以进入的，附上方法截图。主要用途就是改个邮箱，方便接收吓人的邮件。</p><p>建议不要关注邮件，都是同一套模板。<strong>一切以实际能不能ssh上机器为准！</strong></p><p>1.身份和安全-联盟-点进联盟号-点击链接进入DICS管理页面<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260841191.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835892.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835538.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835536.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>2.三处修改，密码，邮箱，恢复邮箱。这里仅是用于IDCS<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260840614.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260840800.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><blockquote><p>原文链接：<a href="https://qssjx.com/?p=700">https://qssjx.com/?p=700</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> vps </tag>
            
            <tag> cloud </tag>
            
            <tag> oracle </tag>
            
            <tag> 甲骨文 </tag>
            
            <tag> 甲骨文云 </tag>
            
            <tag> 帐号 </tag>
            
            <tag> 邮箱 </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash将默认的Clash Premium内核切换为Clash Meta内核</title>
      <link href="/posts/71157ecf.html"/>
      <url>/posts/71157ecf.html</url>
      
        <content type="html"><![CDATA[<p>在我们使用Clash For Windows（以下均使用CFW指代）时，有时候需要使用Clash Meta内核。对于习惯CFW的用户来说，切换客户端有时是一件忍痛割爱的事情。那在这篇教程中，我来和大家一起来在CFW中将默认的Clash Premium内核切换为Clash Meta内核。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Clash For Windows</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>打开 Clash Meta 的项目下载地址：<a href="https://github.com/MetaCubeX/Clash.Meta/releases">https://github.com/MetaCubeX/Clash.Meta/releases</a> ，下载适合自己电脑的版本</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201026040.png" alt="img"></p><ol><li>解压内核程序，备用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201025418.png" alt="img"></p><ol><li>进入CFW的安装目录中的<code>resources/static/files/win/x64</code>（如为32位系统的程序则为<code>x86</code>），将默认的<code>clash-win64.exe</code>更名备份，我这里就改为<code>clash-win642.exe</code></li><li>将第二步解压的内核程序复制进来，并改为<code>clash-win64.exe</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201025239.png" alt="img"></p><ol><li>打开CFW，当此处出现“Unknown”即为切换成功</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201025030.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/04/19/cfw-change-meta/">https://blog.misaka.rest/2023/04/19/cfw-change-meta/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> clash </tag>
            
            <tag> 内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudFlare Argo Tunnel教程</title>
      <link href="/posts/32016df9.html"/>
      <url>/posts/32016df9.html</url>
      
        <content type="html"><![CDATA[<p>在我们使用NAT VPS的时候，或者是我们自己使用本地环境的时候，由于我们没有公网IP，只能使用内网穿透的法子。这时候，我们就可以使用CloudFlare Argo Tunnel来穿透我们需要使用公网IP的服务，并且可以自定义域名。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>一枚域名，并DNS解析到CloudFlare</li></ul><h2 id="步骤方法"><a href="#步骤方法" class="headerlink" title="步骤方法"></a>步骤方法</h2><ol><li>打开Argo Tunnel的官网：<a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation</a> ，然后选择自己的Linux版本下载对应的安装包。CentOS系系统选择rpm包下载，Debian系系统选择deb包下载</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201019203.png" alt="img"></p><ol><li>使用<code>dpkg -i cloudflared-linux-amd64.deb</code>（CentOS：<code>rpm -i cloudflared-linux-amd64.rpm</code>）安装cloudflared客户端<br>PS: 本文中官网下载的文件名为cloudflared-linux-amd64.deb，请按照实际文件名安装</li><li>可以使用<code>cloudflared tunnel --url http://127.0.0.1:端口号</code>命令，测试HTTP隧道效果或使用<code>cloudflared tunnel --url tcp://127.0.0.1:端口号</code>命令，测试TCP隧道效果</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201019082.png" alt="img"></p><ol><li>使用<code>cloudflared tunnel login</code>命令，登录你的CloudFlare账号。复制控制台出现的网址登录你的CloudFlare账号</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201019759.png" alt="img"></p><ol><li>选择一个域名，授权给Argo Tunnel使用</li><li>下面是一些常用的命令</li></ol><p>创建隧道：<code>cloudflared tunnel create 隧道名</code><br>删除隧道：<code>cloudflared tunnel delete 隧道名</code><br>列出隧道：<code>cloudflared tunnel list</code><br>配置隧道：<code>cloudflared tunnel route dns 隧道名 [CNAME 记录名称].[接入 CLoudflare 的域名]</code><br>运行隧道：<code>cloudflared tunnel run --url http://127.0.0.1:http端口号 隧道名</code> 或 <code>cloudflared tunnel run --url tcp://127.0.0.1:tcp端口号 隧道名</code></p><ol><li>使用YML配置文件文件如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line">tunnel: [tunnel 的名称或 UUID]</span><br><span class="line">credentials-file: /root/.cloudflared/[tunnel 的 UUID].json</span><br><span class="line"></span><br><span class="line">ingress:</span><br><span class="line">  - hostname: [CNAME 记录名称].[接入 CLoudflare 的域名]</span><br><span class="line">    service: http://localhost:80</span><br><span class="line">  - service: http_status:404</span><br></pre></td></tr></table></figure><blockquote><p>配置文件使用 Ingress 规则，如果想配置 SSH、TCP 等其他协议，可以查看官网：<a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress</a></p></blockquote><p>然后使用 <code>cloudflared tunnel --config [配置文件路径] run</code> 命令运行隧道</p><p>参考：<a href="https://www.blueskyxn.com/202102/4176.html">https://www.blueskyxn.com/202102/4176.html</a></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/04/19/argo-tunnel/">https://blog.misaka.rest/2023/04/19/argo-tunnel/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> cloudflare </tag>
            
            <tag> cdn </tag>
            
            <tag> argo </tag>
            
            <tag> tunnel </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独角数卡配置支付宝当面付</title>
      <link href="/posts/e76be41c.html"/>
      <url>/posts/e76be41c.html</url>
      
        <content type="html"><![CDATA[<h3 id="支付宝开通个体支付商户"><a href="#支付宝开通个体支付商户" class="headerlink" title="支付宝开通个体支付商户"></a>支付宝开通个体支付商户</h3><p>服务官网地址：<a href="https://b.alipay.com/signing/productDetailV2.htm?productId=I1011000290000001003">https://b.alipay.com/signing/productDetailV2.htm?productId=I1011000290000001003</a></p><p>打开后点击立即开通，扫码登录支付宝账号</p><p>填写开通资料</p><p>填写完成点击提交，审核会很快，一分钟左右。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956339.jpeg" alt="img">填写开通资料</p><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>个体商户开通成功后，打开支付宝官网：<a href="https://b.alipay.com/page/home">https://b.alipay.com/page/home</a></p><ul><li>点击账号中心，点击签约管理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956246.jpeg" alt="img">进入签约管理</p><ul><li>点击查看详情</li></ul><p><img src="https://pic.rmb.bdstatic.com/bjh/down/33813c0e1dc589d136d9b295fa24b3c3.jpeg?x-bce-process=image/watermark,bucket_baidu-rmb-video-cover-1,image_YmpoL25ld3MvNjUzZjZkMjRlMDJiNjdjZWU1NzEzODg0MDNhYTQ0YzQucG5n,type_RlpMYW5UaW5nSGVpU01HQg==,w_49,text_QOWkqei_ueS7peiTnQ==,size_49,x_38,y_38,interval_2,color_FFFFFF,effect_softoutline,shc_000000,blr_2,align_1" alt="img">进入查看详情</p><ul><li>点击自行研发接入</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956207.jpeg" alt="img">进入自行研发接入</p><ul><li>点击网页移动应用，进入详情</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201002293.jpeg" alt="img">网页移动应用</p><ul><li>点击开发设置，点击设置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956773.jpeg" alt="img">设置</p><ol><li>选择接口加签方式</li><li>点击设置</li><li>选择密钥（普通适用）</li><li>下载密钥工具 官网地址：<a href="https://opendocs.alipay.com/common/02kipk">https://opendocs.alipay.com/common/02kipk</a></li><li>选择与你系统对应的版本，安装支付宝开放平台密钥工具</li><li>运行支付宝开放平台密钥工具</li><li>点击生成密钥，可以看到应用公钥和应用私钥，保存下载这两个</li><li>复制支付宝开放平台密钥工具生成的应用公钥</li><li>回到支付宝，在对应位置粘贴应用公钥</li><li>点击确认上传</li><li>下载支付宝公钥</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956689.jpeg" alt="img">设置支付宝公钥</p><h3 id="独角卡后台"><a href="#独角卡后台" class="headerlink" title="独角卡后台"></a>独角卡后台</h3><p>进入独角卡后台，点击支付配置，选择支付宝当面付，编辑支付宝当面付</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201002558.jpeg" alt="img">编辑支付宝当面付</p><ul><li>支付名称填写网页移动应用页面的id（上面复制到记事本的）</li><li>商户key填写网页页面下载的支付宝公钥</li><li>商户密钥填写支付宝密钥工具生成的应用私钥</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201002681.jpeg" alt="img">配置密钥</p><p>下载下来的应用公钥，应用私钥和支付宝公钥</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956233.jpeg" alt="img"></p><blockquote><p>原文链接：<a href="https://baijiahao.baidu.com/s?id=1755777325644896267">https://baijiahao.baidu.com/s?id=1755777325644896267</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 配置 </tag>
            
            <tag> 支付 </tag>
            
            <tag> 支付宝 </tag>
            
            <tag> 当面付 </tag>
            
            <tag> 发卡 </tag>
            
            <tag> 独角数卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Replit部署subconverter（订阅转换）后端</title>
      <link href="/posts/8dd43e1c.html"/>
      <url>/posts/8dd43e1c.html</url>
      
        <content type="html"><![CDATA[<p>在使用Clash的时候，肯定知道Clash是基于yaml的节点配置文件工作的。我们如果去追求方便，去使用在线的订阅转换网页，那么你的节点会有被盗用的风险。这是因为订阅转换站的后端会记录你的个人节点订阅信息。因此，个人建议还是手写配置文件比较保险。但是，如果想确保节点订阅安全，又想追求懒人话使用订阅转换的话，可以考虑自建订阅转换服务。在这篇文章中，我来和大家一起在Replit上部署订阅转换服务</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Replit 账号</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>打开 Replit 项目链接：<a href="https://replit.com/@misaka-blog/subconverter">https://replit.com/@misaka-blog/subconverter</a> ，点击旁边蓝色的“Fork”按钮</li><li>点击顶上的“Run”按钮，待网页预览页面出现“File not found.”即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191606443.png" alt="img"></p><ol><li>打开订阅转换网页（ <a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/</a> ），后端地址选择本地</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191600029.png" alt="img"></p><ol><li>复制出链接，将<code>http://localhost:25500</code>修改成自己的replit地址即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191600165.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/04/19/replit-subconverter/">https://blog.misaka.rest/2023/04/19/replit-subconverter/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> replit </tag>
            
            <tag> subconverter </tag>
            
            <tag> 订阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql之mysqldump整库备份单表恢复还原</title>
      <link href="/posts/8bda40b2.html"/>
      <url>/posts/8bda40b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、需求场景说明"><a href="#一、需求场景说明" class="headerlink" title="一、需求场景说明"></a>一、需求场景说明</h2><p>  日常运维中，我们往往都是整库备份，整库还原。实际工作中会存在需要还原部分表或者单表的情况。例如在开发或者测试环境中，开发人员因为误操作或者测试需要删除或者清空了某个表，我们需要还原这个被删除或者清空的表。为了恢复这个误删表，我们如果使用整库还原会存在2点问题：</p><p>一、直接还原到在用库，可能导致其他表已更新数据被覆盖；</p><p>二、使用临时库整库还原后copy单表会耗时费力（如下图所示，单库整库备份大小将近4G）。实际上我们只需要截取出单表数据，恢复单表即可。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190955099.png" alt="在这里插入图片描述"></p><p>  如何实现整库备份，单表还原的需求场景呢？此博文就是针对此场景进行介绍说明。博文实验环境：</p><ul><li>操作系统：centos7.6</li><li>mysql版本：5.7</li></ul><h2 id="二、单表还原步骤"><a href="#二、单表还原步骤" class="headerlink" title="二、单表还原步骤"></a>二、单表还原步骤</h2><h3 id="1、查看数据库备份文件"><a href="#1、查看数据库备份文件" class="headerlink" title="1、查看数据库备份文件"></a>1、查看数据库备份文件</h3><p>  mysqldump备份的数据实际上就是sql数据导出方式。我们使用cat查看备份的sql文件，可以看到备份工具的版本，数据库版本，数据库名和参数信息等。查看具体内容可以发现导出的数据使用insert into语句存储，不过插入多少行数据，对于文本来说就是一行，而且都包含表名，这个是我们实现单表还原的关键。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190956877.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190956945.png" alt="在这里插入图片描述"></p><p>  为了对比验证单表恢复还原数据的可行性，我们先整库还原了备份数据，耗时1个多小时。其中personchangeinfo表总计9889行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190957548.png" alt="在这里插入图片描述"></p><h3 id="2、使用grep过滤单表数据"><a href="#2、使用grep过滤单表数据" class="headerlink" title="2、使用grep过滤单表数据"></a>2、使用grep过滤单表数据</h3><p>  使用grep过滤需要还原的表数据。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190957279.png" alt="在这里插入图片描述"></p><blockquote><p>[wuhs@s152 tmp]$ cat testdb_all.sql |grep -E ‘INSERT INTO <code>personchangeinfo</code>’ &gt; personchangeinfo1.sql<br>[wuhs@s152 tmp]$ ll -lrt<br>总用量 3934600<br>…<br>-rw-rw-r–. 1 wuhs wuhs 1033114 11月 15 14:39 personchangeinfo1.sql</p></blockquote><h3 id="3、使用sed命令筛出单表数据"><a href="#3、使用sed命令筛出单表数据" class="headerlink" title="3、使用sed命令筛出单表数据"></a>3、使用sed命令筛出单表数据</h3><p>  使用sed -n从整库备份文件中筛查出需要恢复的表数据。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190958876.png" alt="在这里插入图片描述"></p><blockquote><p>[wuhs@s152 tmp]$ sed -n ‘&#x2F;INSERT INTO <code>personchangeinfo</code>&#x2F;p’ testdb_all.sql &gt; personchangeinfo2.sql<br>[wuhs@s152 tmp]$ ll -lrt<br>总用量 3934600<br>…<br>-rw-rw-r–. 1 wuhs wuhs 1033114 11月 15 14:36 personchangeinfo2.sql3 11月 15 14:29 personchangeinfo2.sql</p></blockquote><h3 id="4、创建表结构"><a href="#4、创建表结构" class="headerlink" title="4、创建表结构"></a>4、创建表结构</h3><p>  在备份文件中找到创建表空间语句，并执行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190958981.png" alt="在这里插入图片描述"></p><h3 id="5、单表还原测试"><a href="#5、单表还原测试" class="headerlink" title="5、单表还原测试"></a>5、单表还原测试</h3><p>  我们分别使用grep和sed导出数据进行还原测试，还原结果与整库还原结果一致，说明此方式还原单表可行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190958149.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190959098.png" alt="在这里插入图片描述"></p><h2 id="三、通过脚本实现单表还原"><a href="#三、通过脚本实现单表还原" class="headerlink" title="三、通过脚本实现单表还原"></a>三、通过脚本实现单表还原</h2><h3 id="1、脚本内容"><a href="#1、脚本内容" class="headerlink" title="1、脚本内容"></a>1、脚本内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[wuhs@s152 tmp]$ cat onetableimport.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">#script name: onetableimport.sh</span><br><span class="line">#author: 524627027@qq.com</span><br><span class="line">#用途：此脚本用于从mysqldump整库备份文件中导出单表数据</span><br><span class="line">#使用方式：将整库备份文件重命名为testdb_all.sql,并与此脚本放置在同一个目录下</span><br><span class="line"></span><br><span class="line">#参数定义</span><br><span class="line">workPath=$(cd $(dirname $0); pwd)</span><br><span class="line">t1=&quot;&quot;</span><br><span class="line">tblist=&quot;&quot;</span><br><span class="line">outportfile=$workPath/outport.sh</span><br><span class="line"></span><br><span class="line">#获取数据库表清单</span><br><span class="line">cat testdb_all.sql |grep &quot;CREATE TABLE &quot; &gt; 1.txt</span><br><span class="line">tblist=`awk -F &quot; &quot; &#x27;&#123;print $3&#125;&#x27; 1.txt`</span><br><span class="line">echo &quot;$tblist&quot;</span><br><span class="line">#通过键盘输入需要导出的表</span><br><span class="line">read -p &quot;请输入需要还原的表名(请带符号复制并黏贴):&quot; t1</span><br><span class="line">read -p &quot;请输入导出后文件名：&quot; tname</span><br><span class="line"></span><br><span class="line">#创建单表导出脚本</span><br><span class="line">if [ ! -f $outportfile ]; then</span><br><span class="line">  cat &gt; $outportfile &lt;&lt;EOF</span><br><span class="line">sed -n &#x27;/CREATE TABLE $t1/,/Dumping data for table $t1/p&#x27; testdb_all.sql &gt; $tname.sql</span><br><span class="line">sed -n &#x27;/INSERT INTO $t1/p&#x27; testdb_all.sql &gt;&gt; $tname.sql</span><br><span class="line">EOF</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#执行单表数据导出脚本</span><br><span class="line">chmod u+x $outportfile</span><br><span class="line">sh $outportfile</span><br><span class="line">#结束通知</span><br><span class="line">echo &quot;$tname 数据机构及数据导出完成&quot;</span><br><span class="line">#删除临时文件</span><br><span class="line">rm -rf 1.txt</span><br><span class="line">rm -rf $outportfile</span><br></pre></td></tr></table></figure><h3 id="2、脚本测试"><a href="#2、脚本测试" class="headerlink" title="2、脚本测试"></a>2、脚本测试</h3><blockquote><p>[wuhs@s152 tmp]$ sh onetableimport.sh<br><code>personchangeinfo</code><br>…<br>请输入需要还原的表名(请带符号复制并黏贴):<br>请输入导出后文件名：personchangeinfo<br>personchangeinfo 数据机构及数据导出完成</p></blockquote><h3 id="3、查看导出文件"><a href="#3、查看导出文件" class="headerlink" title="3、查看导出文件"></a>3、查看导出文件</h3><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191000843.png" alt="在这里插入图片描述"></p><h3 id="4、数据恢复测试"><a href="#4、数据恢复测试" class="headerlink" title="4、数据恢复测试"></a>4、数据恢复测试</h3><p>  导出后对比发现数据导出成功，脚本既截取了数据表结构创建sql，也导出了数据内容。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191000078.png" alt="在这里插入图片描述"></p><blockquote><p>原文链接：<a href="https://blog.csdn.net/carefree2005/article/details/127851222">https://blog.csdn.net/carefree2005/article/details/127851222</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mysqldump </tag>
            
            <tag> 备份 </tag>
            
            <tag> 还原 </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启用cloudflare的ssl和二级域名</title>
      <link href="/posts/69e9b14c.html"/>
      <url>/posts/69e9b14c.html</url>
      
        <content type="html"><![CDATA[<h1 id="域名准备"><a href="#域名准备" class="headerlink" title="域名准备"></a>域名准备</h1><p>想要架上二级域名，首先，我们需要一个一级域名……自行在心仪的厂家选购。我比较常用的（价格比较实惠的）是国内的是万网，特价的时候一百多人民币买过十年的。国外的是NameSilo，首年特价很多，.com，.xyz比较实惠，但像.top之类的还是当年万网买得更便宜。（不过拿.top，.cyou之类的便宜域名发邮件比较容易被当成垃圾邮件屏蔽……）</p><p>提醒一下，Freenom的虽然免费，但在那个bug多端的网站申请其实还挺麻烦的，而且实测无法使用LetsEncrypt获取证书（不支持那几个顶级域名）。</p><h1 id="DNS准备"><a href="#DNS准备" class="headerlink" title="DNS准备"></a>DNS准备</h1><p>获得域名后，如果那家的DNS不尽如人意，可以转接其他服务商的DNS，比如Cloudflare。</p><p>在Cloudflare的话，可以这样配置域名：</p><table><thead><tr><th align="left">Type</th><th align="left">Name</th><th align="left">Content</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">你弄到的那个域名，比如mydomain.com</td><td align="left">你的IP(IPv4)</td></tr><tr><td align="left">CNAME</td><td align="left">二级域名，比如blog</td><td align="left">你的主域名，如上面的mydomain.com</td></tr><tr><td align="left">CNAME</td><td align="left">另一个二级域名，如repo</td><td align="left">你的主域名</td></tr><tr><td align="left">CNAME</td><td align="left">其他想要配置的二级域名，如www</td><td align="left">你的主域名</td></tr></tbody></table><p>后面的proxy status显示橙色的云表示已经应用了Cloudflare的CDN，很好，不用管，除非设置的某个子域名是用来直接SSH、FTP服务器的。</p><p>然后，记得在SSL&#x2F;TLS里切换模式到Full（不然在下面的配置中，会让访问在http和https间反复横跳，too many redirections）。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304141001264.png" alt="记得改SSL/TLS模式设置"></p><h1 id="SSL准备"><a href="#SSL准备" class="headerlink" title="SSL准备"></a>SSL准备</h1><p>在有了一个域名的基础上，可以申请LetsEncrypt的域名证书。<br>可以使用<a href="https://github.com/acmesh-official/acme.sh">acme.sh</a></p><p>安装：<code>curl https://get.acme.sh | sh -s email=my@example.com</code><br>其中后面那个email不要用<a href="mailto:&#x6d;&#x79;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#111;&#109;">&#x6d;&#x79;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#111;&#109;</a>，会出错的。</p><p>其他就跟着GitHub的教程来吧，有中文的：<br><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/说明</a></p><p>厂家DNS不给力的记得先换了其他厂家的DNS，不然可以这一步申请证书会超时。</p><blockquote><p>PS：也可以直接使用cloudflare的证书，15年</p></blockquote><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="基础的配置"><a href="#基础的配置" class="headerlink" title="基础的配置"></a>基础的配置</h2><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf里，http花括号里确保有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*.conf;</span><br></pre></td></tr></table></figure><p>这样conf.d和sites-enabled目录下.conf后缀名的文件都会被包含进设置。</p><p>sites-enabled目录下，可以每个站点单写一个.conf文件，方便管理。需要关闭某个站点的时候，直接<code>mv the_site_name.conf ../sites-available</code>把文件移走，然后<code>service nginx restart</code>。要开启某个站点就从sites-available移回来，再重启nginx。</p><h2 id="ssl-snippets"><a href="#ssl-snippets" class="headerlink" title="ssl snippets"></a>ssl snippets</h2><p>如果站点很多的话，给ssl配置部分写一个snippet会方便很多。这样，在每个站点的文件中就可以直接引用snippet，不用一遍一遍的重复证书路径、加密等等的设置了。</p><p>每份域名证书都需要一个对应的snippet，泛域名证书的话，可以多个子域名站点共用同一个snippet。</p><blockquote><p>例，申请了 <code>*.mysite.com</code>的证书，并为它写了ssl snippet<br>a.mysite.com<br>b.mysite.com<br>c.mysite.com<br>都可以共用这个snippet</p></blockquote><p>存放一份据说是安全的设置的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># /etc/nginx/snippets/ssl.conf</span><br><span class="line"># 就是个提醒自己的路径啦</span><br><span class="line"></span><br><span class="line">server_tokens   off;</span><br><span class="line">ssl_session_cache        shared:SSL:10m;</span><br><span class="line">ssl_session_timeout      60m;</span><br><span class="line">ssl_session_tickets      on;</span><br><span class="line"></span><br><span class="line"># OCSP stapling</span><br><span class="line"># 证书状态缓存</span><br><span class="line">ssl_stapling             on;</span><br><span class="line">ssl_stapling_verify      on;</span><br><span class="line">resolver                 8.8.4.4 8.8.8.8  valid=300s;</span><br><span class="line">resolver_timeout         10s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Ephemeral Diffie-Hellman key exchange</span><br><span class="line">ssl_dhparam /your_path_to_cert/dhparam.pem;</span><br><span class="line">ssl_ecdh_curve secp384r1; # Requires nginx &gt;= 1.1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># path to ssl certificates</span><br><span class="line">ssl_certificate         /your_path_to_cert/fullchain.cer;</span><br><span class="line">ssl_certificate_key     /you_path_to_cert/&lt;domain&gt;.key;</span><br><span class="line"></span><br><span class="line"># disable TLSv1.0 &amp; TLSv1.1</span><br><span class="line"># 禁用安全性不好的 TLS1.0和1.1</span><br><span class="line">ssl_protocols           TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">ssl_ciphers &quot;ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># headers</span><br><span class="line">add_header  Strict-Transport-Security &quot;max-age=31536000;includeSubDomains;preload&quot;;</span><br><span class="line">add_header  X-Frame-Options  sameorigin;</span><br><span class="line">add_header  Referrer-Policy  strict-origin-when-cross-origin;</span><br><span class="line"> </span><br><span class="line">add_header  X-Content-Type-Options  nosniff;</span><br><span class="line">add_header  x-xss-protection &quot;1; mode=block&quot;;</span><br><span class="line"></span><br><span class="line">add_header Content-Security-Policy &quot;default-src &#x27;self&#x27; *.your_domain.com other_sites.com; script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27; blob: https:; connect-src &#x27;self&#x27; https:; img-src &#x27;self&#x27; data: https: blob:; style-src &#x27;unsafe-inline&#x27; https:; font-src &#x27;self&#x27; https: data:&quot;;</span><br></pre></td></tr></table></figure><p>其中，your_path_to_cert（放证书、秘钥等的路径）和CSP请自行调整。</p><p>DF参数提高到至少2048位（乐意的话4096位也可以哦）：<br><code>openssl dhparam -out /your_path_to_cert/dhparam.pem 2048</code><br>openssl如果没有就apt-get安装</p><p>CSP（Content-Security-Policy）里加入你信任的、需要用到的网站和加载方式，浏览器会把没包含在内的加载内容全都截下来的（F12看network或者console里面）。如果配置完，从HTTPS访问时网站有部分内容不显示或表现不正常，优先查看是否因为CSP被浏览器拦截。</p><h2 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h2><p>站点的模板，每个站点要使用含有对应证书的ssl snippet哦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line">        server_name &lt;your_secondary_domain&gt;.&lt;your_domain&gt;.com; # 不是.com的自己改啦</span><br><span class="line">        return 301 https://$server_name$request_uri; # 如果被以http访问了，转https</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl; # 这个ssl很重要，不写的话可能会有奇奇怪怪的悲剧发生。另外这行是ipv4</span><br><span class="line">        listen [::]:443 ssl; # 这行是ipv6</span><br><span class="line">        server_name &lt;your_secondary_domain&gt;.&lt;your_domain&gt;.com; # 同上</span><br><span class="line">        </span><br><span class="line">        include snippets/ssl.conf; # 上文中写好的对应snippet，或者自己的ssl设置</span><br><span class="line">        </span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:&lt;port_number&gt;/&lt;app_name&gt;; #你要转到哪里</span><br><span class="line">        </span><br><span class="line">        proxy_set_header        Host             $host;</span><br><span class="line">        proxy_set_header        X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_http_version      1.1;</span><br><span class="line">        proxy_set_header        Upgrade          $http_upgrade;</span><br><span class="line">        proxy_set_header        Connection       $http_connection;</span><br><span class="line">        proxy_set_header        Origin           http://$host;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p>配置好之后，<code>nginx -t</code>测试配置。测试通过的话<code>sudo service nginx restart</code>重启就可以看到效果了。不过要刷新ssl证书（比如更新过、或者吊销又重新申请了证书等情况）的话需要<code>sudo service nginx force-reload</code>哟。</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cloudflare </tag>
            
            <tag> cdn </tag>
            
            <tag> vps </tag>
            
            <tag> ssl </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Oracle Cloud（甲骨文云）的沙盒，体验其的云服务</title>
      <link href="/posts/22db22cf.html"/>
      <url>/posts/22db22cf.html</url>
      
        <content type="html"><![CDATA[<p>众所周知，甲骨文的服务器对中国大陆实行了严苛的注册制度，从而导致注册大概率失败。如果有人需要体验甲骨文的服务器而苦于注册不成功的话，那该咋办呢？在这期教程中，我来和大家一起使用甲骨文的沙盒，体验甲骨文云的服务。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Oracle 账户</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>打开这个网站：<a href="https://apexapps.oracle.com/pls/apex/r/dbpm/livelabs/view-workshop?wid=648">https://apexapps.oracle.com/pls/apex/r/dbpm/livelabs/view-workshop?wid=648</a> ，登录自己的Oracle账户。然后点击“Start”启动沙盒</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132049408.png" alt="img"></p><ol start="2"><li>点击底下的绿色按钮，启动沙盒</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132054265.png" alt="img"></p><ol start="3"><li>设置时区，同意协议。然后点击绿色按钮启动沙盒</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132100047.png" alt="img"></p><ol start="4"><li>等待配置沙盒，大概需要2-5分钟的时间</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132055085.png" alt="img"></p><ol start="5"><li>待配置完成后，点击“Launch Workshop”</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132055879.png" alt="img"></p><ol start="6"><li>点击“View Login Info”，然后复制密码，点击“Launch OCI”按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132055780.png" alt="img"></p><ol start="7"><li>可以正常登录到云控制面板</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132049132.png" alt="img"></p><ol start="8"><li>如需延长试用时间，可点击“Extend Workshop Reservation”字样续时。最高可以续到10小时</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132049219.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> vps </tag>
            
            <tag> cloud </tag>
            
            <tag> oracle </tag>
            
            <tag> 甲骨文 </tag>
            
            <tag> 甲骨文云 </tag>
            
            <tag> 沙盒 </tag>
            
            <tag> 体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsServer2022激活</title>
      <link href="/posts/e96d05a4.html"/>
      <url>/posts/e96d05a4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-2022-Datacenter"><a href="#Windows-Server-2022-Datacenter" class="headerlink" title="Windows Server 2022 Datacenter"></a>Windows Server 2022 Datacenter</h1><p>slmgr -ipk WX4NM-KYWYW-QJJR4-XV3QB-6VM33<br>slmgr &#x2F;skms kms.03k.org<br>slmgr -ato<br>slmgr -dlv</p><h1 id="Windows-Server-2022-Standard"><a href="#Windows-Server-2022-Standard" class="headerlink" title="Windows Server 2022 Standard"></a>Windows Server 2022 Standard</h1><p>slmgr -ipk VDYBN-27WPP-V4HQT-9VMD4-VMK7H<br>slmgr &#x2F;skms kms.03k.org<br>slmgr -ato<br>slmgr -dlv</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香港银行开户指南</title>
      <link href="/posts/c22df0be.html"/>
      <url>/posts/c22df0be.html</url>
      
        <content type="html"><![CDATA[<h2 id="中国银行香港"><a href="#中国银行香港" class="headerlink" title="中国银行香港"></a>中国银行香港</h2><p>难度：★<br>所需资料：港澳通行证、入境小白条、内地身份证<br>理财要求：无<br>存款要求：无<br>预约时间：无需预约<br>推荐路线：香港西九龙高铁站，中港城2楼 分行</p><h2 id="招商永隆"><a href="#招商永隆" class="headerlink" title="招商永隆"></a>招商永隆</h2><p>难度：★★<br>所需资料：港澳通行证、入境小白条、内地身份证、地址证明<br>理财要求：无<br>存款要求：存款10000<br>预约时间：提前在 招商永隆预约<br>地址证明：三个月有效地址证明<br>备注：三个月存款低于1万，每个月有100hkd管理费</p><h2 id="众安ZA-Bank（虚拟银行）"><a href="#众安ZA-Bank（虚拟银行）" class="headerlink" title="众安ZA Bank（虚拟银行）"></a>众安ZA Bank（虚拟银行）</h2><p>难度：无<br>所需资料：港澳通行证、内地身份证<br>理财要求：无<br>存款要求：无<br>预约时间：无<br>备注：人在香港，下载ZA Bank的app直接申请</p><blockquote><p>待更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 香港 </tag>
            
            <tag> 银行 </tag>
            
            <tag> 开启 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一篇示例文章</title>
      <link href="/posts/a6626f42.html"/>
      <url>/posts/a6626f42.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130811174.jpeg" alt="main1"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130810895.jpeg" alt="top_img1"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130810343.jpeg" alt="General 3000x2092 women camera hands"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130823798.jpeg" alt="General 3840x2160 Star Trek Star Trek: TOS spaceship vehicle"></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
