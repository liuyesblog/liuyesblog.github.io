<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux网络优化加速一键脚本</title>
      <link href="/posts/6d4bb709.html"/>
      <url>/posts/6d4bb709.html</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="小白不要使用"><a href="#小白不要使用" class="headerlink" title="小白不要使用"></a>小白不要使用</h3><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305311126017.png" alt="qianyingbbr(1).png"></p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">&quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span></span><br><span class="line"><span class="built_in">chmod</span> +x tcp.sh</span><br><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure><h2 id="脚本说明"><a href="#脚本说明" class="headerlink" title="脚本说明"></a>脚本说明</h2><blockquote><p>支持系统<br>Centos 6+ &#x2F; Debian 7+ &#x2F; Ubuntu 14+<br>BBR魔改版不支持Debian 8</p></blockquote><p>如果在删除内核环节出现这样一张图<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305311126202.png" alt="3363374172.png"><br><strong>注意选择NO</strong></p><p>根据自己需求操作，重启后再使用<code>./tcp.sh</code>命令接着操作</p><p>脚本会自动检测安装的情况，请注意脚本菜单下的<strong>状态检测</strong>即可。</p></li></ul><blockquote><p>原文链接：<a href="https://xd0.me/?id=10">https://xd0.me/?id=10</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> linux </tag>
            
            <tag> 网络 </tag>
            
            <tag> 优化 </tag>
            
            <tag> 加速 </tag>
            
            <tag> 一键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lxc母鸡批量开小鸡</title>
      <link href="/posts/85890b5e.html"/>
      <url>/posts/85890b5e.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果脚本有任何问题或者任何修复系统的需求，可在issues中提出，有空会解决或者回答</p><h1 id="lxc-一键母鸡开小鸡"><a href="#lxc-一键母鸡开小鸡" class="headerlink" title="lxc 一键母鸡开小鸡"></a>lxc 一键母鸡开小鸡</h1><p>更新：</p><p>2023.05.28 修复部分宿主机原生的DNS和IPV4网络优先级的问题</p><p><a href="CHANGELOG.md">更新日志</a></p><h2 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h2><p>使得母鸡支持更多的系统版本，使小鸡支持更多的系统版本</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#%E9%85%8D%E7%BD%AE%E8%A6%81%E6%B1%82">配置要求</a><ul><li><a href="#%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B">脚本检测</a></li></ul></li><li><a href="#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85">手动安装</a><ul><li><a href="#%E6%99%AE%E9%80%9A%E7%89%88%E6%9C%AC">普通版本</a><ul><li><a href="#%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99">关闭防火墙</a></li><li><a href="#%E5%BC%80%E8%AE%BE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98SWAP">开设虚拟内存SWAP</a></li><li><a href="#%E5%AE%89%E8%A3%85LXD">安装LXD</a></li><li><a href="#%E5%A4%9A%E6%AC%A1%E6%89%B9%E9%87%8F%E7%94%9F%E6%88%90LXC%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%B0%8F%E9%B8%A1">多次批量生成LXC虚拟化的小鸡</a></li></ul></li><li><a href="#%E7%BA%AF%E6%8E%A2%E9%92%88%E7%89%88%E6%9C%AC">纯探针版本</a></li><li><a href="#%E6%9F%A5%E7%9C%8Blog%E6%96%87%E4%BB%B6">查看log文件</a></li><li><a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">注意事项</a></li></ul></li><li><a href="#%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E8%80%81%E6%89%8B%E6%8E%A8%E8%8D%90%E6%96%B9%E4%BE%BF%E5%BF%AB%E6%8D%B7">一键脚本老手推荐方便快捷</a><ul><li><a href="#%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85lxd%E7%8E%AF%E5%A2%83">一键安装lxd环境</a></li><li><a href="#%E5%8F%AA%E5%BC%80%E4%B8%80%E4%B8%AANAT%E6%9C%8D%E5%8A%A1%E5%99%A8">只开一个NAT服务器</a></li><li><a href="#%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE">其他配置</a></li></ul></li><li><a href="#%E8%87%B4%E8%B0%A2">致谢</a></li><li><a href="#%E5%8F%8B%E9%93%BE">友链</a></li></ul><h2 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h2><p>硬件要求:</p><ul><li>系统：Debian 8+, Ubuntu 18+(推荐)，系统越新越好</li><li>架构：推荐KVM、VMWARE虚拟化</li><li>内存：内存至少512MB</li><li>硬盘：硬盘(系统盘)至少10G</li><li>网络：独立的IPV4地址，IPV6可有可无，带宽能下载脚本就行，网络能连接Github的raw页面就行</li></ul><p>PS: 如果硬件非常好资源很多，可使用PVE批量开KVM虚拟化的虚拟机 <a href="https://github.com/spiritLHLS/pve">跳转</a></p><p>PS: 如果硬件资源更烂，虚拟化不支持，可使用docker版本的，适配面更广 <a href="https://github.com/spiritLHLS/docker">跳转</a></p><h3 id="脚本检测"><a href="#脚本检测" class="headerlink" title="脚本检测"></a>脚本检测</h3><p><strong>使用后续脚本的务必执行本命令检测母鸡是否符合要求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget -qO- --no-check-certificate https://raw.githubusercontent.com/spiritLHLS/lxc/main/scripts/pre_check.sh)</span><br></pre></td></tr></table></figure><h4 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点"></a>项目特点</h4><ul><li><p>本套脚本开发使用的Ubuntu20，Ubuntu别的长期维护版本应该也没问题，Debian无法使用zfs时自动切换别的存储类型</p></li><li><p>已设置同时进行TCP和UDP转发，除了SSH端口其他的映射内网外网端口一致</p></li><li><p>已设置支持开出的LXC容器进行docker嵌套虚拟，默认普通版本和纯探针版本使用debian11系统</p></li><li><p>已屏蔽容器内可能用于滥用的工具包和IPV4网络的TCP&#x2F;UDP协议的端口( 3389 8888 54321 65432 )，以防止容器被用于扫描和爆破，且可外置进程检查有问题自动停机</p></li><li><p>已支持一键为LXC容器配置IPV6地址(前提是母鸡有IPV6子网，无IPV6地址则不配置)</p></li><li><p>一定要在 <code>/root</code> 的路径下运行本仓库脚本，且使用<code>一键脚本</code>的<strong>不要删除</strong>路径下的<code>ssh.sh</code>和<code>config.sh</code>文件</p></li><li><p>保证你要开的盘为默认的系统盘(sda或者sda1)而不是挂载的盘(sdb之类的)，不确定的使用<code>fdisk -l</code>和<code>df</code>查看</p></li><li><p>挂载其他盘的详看 <a href="https://github.com/spiritLHLS/lxc/blob/main/README_other.md">其他说明</a></p></li><li><p>一键脚本支持自定义限制所有内容，普通版本支持多次运行批量生成不覆盖先前生成的配置</p></li></ul><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>新手推荐，避免有bug不知道怎么修</p><ul><li>批量生成NAT服务器</li><li>支持批量重复生成(多次批量开NAT服务器，且不覆盖原配置)</li><li>批量重复生成仅限于普通版本的配置，不支持纯探针版本</li></ul><h3 id="普通版本"><a href="#普通版本" class="headerlink" title="普通版本"></a>普通版本</h3><p>(带1个SSH端口，25个外网端口)</p><p>开出的小鸡配置：1核256MB内存1GB硬盘限速250Mbps带宽</p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install curl wget sudo dos2unix ufw -y</span><br><span class="line">ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><h4 id="开设虚拟内存SWAP"><a href="#开设虚拟内存SWAP" class="headerlink" title="开设虚拟内存SWAP"></a>开设虚拟内存SWAP</h4><p>内存看你开多少小鸡，这里如果要开8个，换算需要2G内存，实际内存如果是512MB内存，还需要开1.5G，保守点开2G虚拟内存即可</p><p>执行下面命令，输入1，再输入2048，代表开2G虚拟内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/lxc/main/scripts/swap.sh -o swap.sh &amp;&amp; chmod +x swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure><h4 id="安装LXD"><a href="#安装LXD" class="headerlink" title="安装LXD"></a>安装LXD</h4><p>实际swap开的虚拟内存应该是实际内存的2倍，也就是开1G是合理的，上面我描述的情况属于超开了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install snapd -y</span><br><span class="line">snap install lxd</span><br><span class="line">/snap/bin/lxd init</span><br></pre></td></tr></table></figure><p>如果上面的命令中出现下面的错误</p><p>(snap “lxd” assumes unsupported features: snapd2.39 (try to update snapd and refresh the core snap))</p><p>使用命令修补后再进行lxd的安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snap install core</span><br></pre></td></tr></table></figure><p>如果无异常，上面三行命令执行结果如下</p><p><img src="https://user-images.githubusercontent.com/103393591/233270028-5a43d0f7-45f5-4175-969e-d4d182cb877a.png" alt="图片"></p><p>一般的选项回车默认即可</p><p>选择配置物理盘大小(提示默认最小1GB那个选项)，一般我填空闲磁盘大小减去内存大小后乘以0.95并向下取整，这里我填了10GB</p><p>提示带auto的更新image的选项记得选no，避免更新占用系统</p><p>测试lxc有没有软连接上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc -h</span><br></pre></td></tr></table></figure><p>如果报错则执行以下命令软连接lxc命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">! lxc -h &gt;/dev/null 2&gt;&amp;1 &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;alias lxc=&quot;/snap/bin/lxc&quot;&#x27;</span> &gt;&gt; /root/.bashrc &amp;&amp; <span class="built_in">source</span> /root/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/snap/bin</span><br></pre></td></tr></table></figure><p>连接后再测试lxc命令是否有报错找不到</p><h4 id="手动批量生成LXC虚拟化的小鸡"><a href="#手动批量生成LXC虚拟化的小鸡" class="headerlink" title="手动批量生成LXC虚拟化的小鸡"></a>手动批量生成LXC虚拟化的小鸡</h4><p>(默认内存和硬盘大小)</p><p>lxc若命令无问题，执行初始化开小鸡，这一步最好放<code>screen</code>中后台挂起执行，开小鸡时长与你开几个和母鸡配置相关</p><p>执行下面命令加载开机脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf init.sh</span><br><span class="line">wget https://github.com/spiritLHLS/lxc/raw/main/scripts/init.sh</span><br><span class="line">chmod 777 init.sh</span><br><span class="line">apt install dos2unix -y</span><br><span class="line">dos2unix init.sh</span><br></pre></td></tr></table></figure><p>下面命令为开小鸡名字前缀为<strong>tj</strong>的<strong>10</strong>个小鸡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./init.sh tj 10</span><br></pre></td></tr></table></figure><p>有时候init.sh的运行路径有问题，此时建议前面加上sudo强制根目录执行</p><h4 id="多次批量生成LXC虚拟化的小鸡"><a href="#多次批量生成LXC虚拟化的小鸡" class="headerlink" title="多次批量生成LXC虚拟化的小鸡"></a>多次批量生成LXC虚拟化的小鸡</h4><p>可自定义内存和硬盘大小</p><p>有执行过上面的手动批量生成过也没问题，配置是继承的不覆盖</p><p>如果需要多次批量生成小鸡，可使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/spiritLHLS/lxc/raw/main/scripts/add_more.sh -o add_more.sh &amp;&amp; chmod +x add_more.sh &amp;&amp; bash add_more.sh</span><br></pre></td></tr></table></figure><p>可多次运行批量生成小鸡，且继承前面已生成的部分在后面添加，可自定义内存和硬盘大小</p><h3 id="纯探针版本"><a href="#纯探针版本" class="headerlink" title="纯探针版本"></a>纯探针版本</h3><p>(只有一个SSH端口)</p><p>开出的小鸡配置：1核128MB内存300MB硬盘限速200Mbps带宽</p><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install curl wget sudo dos2unix ufw -y</span><br><span class="line">ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p>开设虚拟内存</p><p>内存看你开多少小鸡，这里如果要开10个，换算需要1G内存，实际内存如果是512MB内存，还需要开0.5G，保守点开1G虚拟内存即可</p><p>执行下面命令，输入1，再输入1024，代表开1G虚拟内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/lxc/main/scripts/swap.sh -o swap.sh &amp;&amp; <span class="built_in">chmod</span> +x swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure><p>实际swap开的虚拟内存应该是实际内存的2倍，也就是开1G是合理的，再多就超开了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install snapd -y</span><br><span class="line">snap install lxd</span><br><span class="line">/snap/bin/lxd init</span><br></pre></td></tr></table></figure><p>如果上面的命令中出现下面的错误</p><p>(snap “lxd” assumes unsupported features: snapd2.39 (try to update snapd and refresh the core snap))</p><p>使用命令修补后再进行lxd的安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snap install core</span><br></pre></td></tr></table></figure><p>如果无异常，上面三行命令执行结果如下</p><p><img src="https://user-images.githubusercontent.com/103393591/233270028-5a43d0f7-45f5-4175-969e-d4d182cb877a.png" alt="图片"></p><p>一般的选项回车默认即可</p><p>选择配置物理盘大小(提示默认最小1GB那行)，一般我填空闲磁盘大小减去内存大小后乘以0.95并向下取整</p><p>提示带auto的更新image的选项记得选no，避免更新占用</p><p>软连接lxc命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">! lxc -h &gt;/dev/null 2&gt;&amp;1 &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;alias lxc=&quot;/snap/bin/lxc&quot;&#x27;</span> &gt;&gt; /root/.bashrc &amp;&amp; <span class="built_in">source</span> /root/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/snap/bin</span><br></pre></td></tr></table></figure><p>测试lxc有没有软连接上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc -h</span><br></pre></td></tr></table></figure><p>lxc命令无问题，执行初始化开小鸡，这一步最好放screen中后台挂起执行，开小鸡时长与你开几个和母鸡配置相关</p><p>加载开机脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf least.sh</span><br><span class="line">wget https://github.com/spiritLHLS/lxc/raw/main/scripts/least.sh</span><br><span class="line">chmod 777 least.sh</span><br><span class="line">apt install dos2unix -y</span><br><span class="line">dos2unix least.sh</span><br></pre></td></tr></table></figure><p>下列命令最后一行为开小鸡名字前缀为<strong>tj</strong>的<strong>10</strong>个小鸡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./least.sh tj 10</span><br></pre></td></tr></table></figure><p>有时候least.sh的运行路径有问题，此时建议前面加上sudo强制根目录执行</p><h3 id="查看log文件"><a href="#查看log文件" class="headerlink" title="查看log文件"></a>查看log文件</h3><h4 id="开完小鸡后，具体信息会生成在当前目录下的log文件中，格式如下"><a href="#开完小鸡后，具体信息会生成在当前目录下的log文件中，格式如下" class="headerlink" title="开完小鸡后，具体信息会生成在当前目录下的log文件中，格式如下"></a>开完小鸡后，具体信息会生成在当前目录下的log文件中，格式如下</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1号服务器名称 密码 ssh端口 外网端口起始 外网端口终止</span><br><span class="line">2号服务器名称 密码 ssh端口 外网端口起始 外网端口终止</span><br></pre></td></tr></table></figure><p>如果想要查看，只需在当前目录执行以下命令打印log文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="不要拿该脚本开出的小鸡当生产环境，lxc虚拟化不支持换内核，dd，开启bbr，纯探针版本-普通版本无问题-挂载warp等操作"><a href="#不要拿该脚本开出的小鸡当生产环境，lxc虚拟化不支持换内核，dd，开启bbr，纯探针版本-普通版本无问题-挂载warp等操作" class="headerlink" title="不要拿该脚本开出的小鸡当生产环境，lxc虚拟化不支持换内核，dd，开启bbr，纯探针版本(普通版本无问题)挂载warp等操作"></a>不要拿该脚本开出的小鸡当生产环境，lxc虚拟化不支持换内核，dd，开启bbr，<strong>纯探针版本</strong>(普通版本无问题)挂载warp等操作</h4><p>本仓库不提供lxc虚拟化使用的其他问题的解答，非脚本相关问题请自行解决</p><p>虚拟小鸡想要查看是否在线</p><p>查看所有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc list</span><br></pre></td></tr></table></figure><p>查看个例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc info 服务器名字</span><br></pre></td></tr></table></figure><p>启动个例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc start 服务器名字</span><br></pre></td></tr></table></figure><p>停止个例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc stop 服务器名字</span><br></pre></td></tr></table></figure><p>删除个例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc delete -f 服务器名字</span><br></pre></td></tr></table></figure><p>进入内部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc <span class="built_in">exec</span> 服务器名字 /bin/bash</span><br></pre></td></tr></table></figure><p>退出则输入<code>exit</code>回车即可</p><p>删除所有LXC容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc list | awk &#x27;&#123;print $2&#125;&#x27; | grep -v &quot;^$&quot; | xargs -I &#123;&#125; lxc delete -f &#123;&#125;</span><br></pre></td></tr></table></figure><p>在容器内执行删除无用日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get clean</span><br><span class="line">sudo find /var/log -type f -delete</span><br><span class="line">sudo find /var/tmp -type f -delete</span><br><span class="line">sudo find /tmp -type f -delete</span><br><span class="line">sudo find /var/cache/apt/archives -type f -delete</span><br></pre></td></tr></table></figure><h2 id="一键脚本老手推荐方便快捷"><a href="#一键脚本老手推荐方便快捷" class="headerlink" title="一键脚本老手推荐方便快捷"></a>一键脚本老手推荐方便快捷</h2><ul><li>环境要求：Ubuntu 18+(推荐)，Debian 8+(仅限x86_64架构)</li><li>只生成一个NAT服务器，可自定义限制所有内容</li></ul><h4 id="一键安装lxd环境"><a href="#一键安装lxd环境" class="headerlink" title="一键安装lxd环境"></a>一键安装lxd环境</h4><h5 id="初始化LXC环境"><a href="#初始化LXC环境" class="headerlink" title="初始化LXC环境"></a>初始化LXC环境</h5><p><strong>如果是全新的服务器，务必保证apt update和apt install curl都无问题再执行本脚本</strong></p><p><strong>且自开机起最好等待5分钟后再执行以下命令，避免系统默认设置中就执行了本脚本导致apt源卡死</strong></p><p>这里的虚拟内存是说要开的SWAP大小，存储池则是你所有要开的小鸡占的盘的大小的总和</p><p><strong>如果是Debian系统的母鸡，务必在screen中执行本脚本，避免长期运行时SSH中断导致ZFS编译安装失败</strong></p><p>环境安装过程中可能需要重启服务器再次执行以加载含zfs的内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/lxc/main/scripts/lxdinstall.sh -o lxdinstall.sh &amp;&amp; <span class="built_in">chmod</span> +x lxdinstall.sh &amp;&amp; bash lxdinstall.sh</span><br></pre></td></tr></table></figure><p>例子：</p><p>如果系统盘除去已占用空间还有18G硬盘空余，想开2G虚拟内存(2048MB的SWAP)，15G的存储池，则依次输入<code>2048</code>和<code>15</code></p><h4 id="只开一个NAT服务器"><a href="#只开一个NAT服务器" class="headerlink" title="只开一个NAT服务器"></a>只开一个NAT服务器</h4><h5 id="下载开机脚本"><a href="#下载开机脚本" class="headerlink" title="下载开机脚本"></a>下载开机脚本</h5><ul><li>(<em><strong>非必须</strong></em>，如果你使用过一键安装LXD的命令，自动已下载对应的开机脚本，请忽略下面的命令)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf buildone.sh</span><br><span class="line">wget https://raw.githubusercontent.com/spiritLHLS/lxc/main/scripts/buildone.sh</span><br><span class="line">chmod 777 buildone.sh</span><br><span class="line">apt install dos2unix -y</span><br><span class="line">dos2unix buildone.sh</span><br></pre></td></tr></table></figure><h5 id="开NAT服务器"><a href="#开NAT服务器" class="headerlink" title="开NAT服务器"></a>开NAT服务器</h5><p>内存大小以MB计算，硬盘大小以GB计算，下载速度上传速度以Mbit计算，是否启用IPV6不一定要填Y或者N，没有这个参数也行</p><p>如果<code>外网起端口</code>和<code>外网止端口</code>都设置为0则不做区间外网端口映射了，只映射基础的SSH端口，注意<code>不能为空</code>，不进行映射需要设置为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./buildone.sh 小鸡名称 内存大小 硬盘大小 SSH端口 外网起端口 外网止端口 下载速度 上传速度 是否启用IPV6(Y or N)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./buildone.sh test 256 2 20001 20002 20025 300 300 N</span><br></pre></td></tr></table></figure><p>这样就是创建一个名为test的小鸡，内存256MB，硬盘2G，SSH端口20001，内外网起止端口20002~20025，下载和上传速度都设置为300Mbit，且不自动设置外网IPV6地址</p><p>如果已通过以上方法生成过小鸡，还需要批量生成小鸡，可使用手动安装部分的脚本</p><p>但注意先删除测试小鸡再进行批量生成小鸡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lxc delete -f test</span><br><span class="line">rm -rf test</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>需要查看信息则执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 小鸡名字</span><br></pre></td></tr></table></figure><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul><li><strong>以下的配置安装会加重母鸡的负担，非必要不要安装</strong></li></ul><h5 id="自动配置IPV6地址"><a href="#自动配置IPV6地址" class="headerlink" title="自动配置IPV6地址"></a>自动配置IPV6地址</h5><ul><li>(<em><strong>非必须</strong></em>，不使用的也没问题)</li><li><strong>该脚本仅适用于母鸡有给<code>IPV6</code>子网且是<code>/64</code>的，且母鸡绑定了子网的<code>第一个IP</code>做<code>母鸡的IPV6地址或IPV6的gateway</code></strong></li><li>自动为LXD创建的LXC容器配置<code>IPV6</code>地址</li><li>已集成到<code>buildone.sh</code>中可使用变量控制且无需事先下载，该脚本可不手动使用，在使用<code>buildone.sh</code>时配置Y开启即可</li></ul><p>下载脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/lxc/main/scripts/build_ipv6_network.sh -o build_ipv6_network.sh &amp;&amp; <span class="built_in">chmod</span> +x build_ipv6_network.sh</span><br></pre></td></tr></table></figure><p>自动为容器配置IPV6映射地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash build_ipv6_network.sh 容器名称</span><br></pre></td></tr></table></figure><p>映射完毕会打印信息</p><p>示例(给test容器自动配置IPV6地址，配置完成会写入一个test_v6的文件信息)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash build_ipv6_network.sh <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>删除所有IPV6已映射的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip6tables -t nat -F PREROUTING</span><br></pre></td></tr></table></figure><h5 id="屏蔽容易被滥用的端口的出入流量以屏蔽端口和屏蔽滥用工具包"><a href="#屏蔽容易被滥用的端口的出入流量以屏蔽端口和屏蔽滥用工具包" class="headerlink" title="屏蔽容易被滥用的端口的出入流量以屏蔽端口和屏蔽滥用工具包"></a>屏蔽容易被滥用的端口的出入流量以屏蔽端口和屏蔽滥用工具包</h5><ul><li>(<em><strong>非必须</strong></em>，该脚本仅仅是为了防止容器滥用方便，不装的也没问题)</li><li>事前预防</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/spiritLHLS/lxc/raw/main/scripts/rules.sh -o rules.sh &amp;&amp; chmod +x rules.sh &amp;&amp; bash rules.sh</span><br></pre></td></tr></table></figure><h5 id="使用screen配置监控屏蔽某些进程的执行，遇到某些进程的出现直接关闭容器"><a href="#使用screen配置监控屏蔽某些进程的执行，遇到某些进程的出现直接关闭容器" class="headerlink" title="使用screen配置监控屏蔽某些进程的执行，遇到某些进程的出现直接关闭容器"></a>使用screen配置监控屏蔽某些进程的执行，遇到某些进程的出现直接关闭容器</h5><ul><li>如需停止监控可使用<code>screen</code>命令停止<code>lxc_moniter</code>这个名字的窗口并删除</li><li>(<em><strong>非必须</strong></em>，该脚本仅仅是为了防止容器滥用方便，不装的也没问题)</li><li>事后停机</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/spiritLHLS/lxc/raw/main/scripts/build_monitor.sh -o build_monitor.sh &amp;&amp; chmod +x build_monitor.sh &amp;&amp; bash build_monitor.sh</span><br></pre></td></tr></table></figure><h5 id="一键安装开lxd母鸡所需要的带vnstat环境的常用预配置环境"><a href="#一键安装开lxd母鸡所需要的带vnstat环境的常用预配置环境" class="headerlink" title="一键安装开lxd母鸡所需要的带vnstat环境的常用预配置环境"></a>一键安装开lxd母鸡所需要的带vnstat环境的常用预配置环境</h5><ul><li>(<em><strong>非必须</strong></em>，该脚本仅仅是为了站点对接监控方便，不装的也没问题)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/lxc/main/scripts/backend.sh -o backend.sh &amp;&amp; chmod +x backend.sh &amp;&amp; bash backend.sh</span><br></pre></td></tr></table></figure><h5 id="一键安装母鸡可视化操作的面板"><a href="#一键安装母鸡可视化操作的面板" class="headerlink" title="一键安装母鸡可视化操作的面板"></a>一键安装母鸡可视化操作的面板</h5><ul><li>(<em><strong>非必须</strong></em>，该面板只是为了方便可视化操作，没有也没问题)</li><li>原作者仓库：<a href="https://github.com/turtle0x1/LxdMosaic">跳转</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lxc config set core.https_address [::]</span><br><span class="line">lxc config set core.trust_password some-secret-string</span><br><span class="line">snap install lxdmosaic</span><br></pre></td></tr></table></figure><p>安装完毕后打开母鸡IP地址，按照提示设置admin的密码，其他一路默认就能使用面板了</p><p><strong>原作者项目地址：<a href="https://github.com/spiritLHLS/lxc">点击跳转</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lxc </tag>
            
            <tag> 脚本 </tag>
            
            <tag> nat </tag>
            
            <tag> 小鸡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键梭哈脚本</title>
      <link href="/posts/88eb9716.html"/>
      <url>/posts/88eb9716.html</url>
      
        <content type="html"><![CDATA[<p><strong>安装脚本：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/w854155226/Install-libpcap/main/suoha.sh -o suoha.sh &amp;&amp; bash suoha.sh</span><br></pre></td></tr></table></figure><p><strong>开始安装</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305310825025.png" alt="img"></p><p><strong>选择：1</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305310826009.png" alt="img"></p><p><strong>根据你的喜好选择1或者是2，(这里我选择1)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305310825362.png" alt="img"></p><p>选择IPV4或者IPV6(如果是IPV6机器选择IPV6)</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305310827202.png" alt="img"></p><p><strong>安装完成后会自动显示节点信息</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305310825537.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
            <tag> cloudflare </tag>
            
            <tag> alpine </tag>
            
            <tag> 脚本 </tag>
            
            <tag> v2ray </tag>
            
            <tag> 梭哈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker架设NAT机器</title>
      <link href="/posts/63f131f8.html"/>
      <url>/posts/63f131f8.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305311056458.jpeg" alt="img"></p><p>通过docker批量或单独开设NAT服务器(Bulk or individual NAT server provisioning via docker)</p><p>默认使用debian系统，每个容器自带1个外网ssh端口，25个内外网一致端口</p><p>默认创建的是非特权容器，且不挂载与宿主机的docker的守护进程之间的通信，所以宿主机创建的docker虚拟化的NAT服务器内无法再嵌套虚拟化docker</p><p>由于只是在宿主机进行了CPU和内存的限制未在容器内使用cgroup驱动，所以在容器内使用服务器测试脚本检测容器的可用资源是无效的，显示的会是宿主机的资源</p><p>由于大部分云服务器xfs文件系统不启用pquota选项，所以默认共享宿主机硬盘，无法限制每个容器的磁盘大小</p><p>原作者项目地址：<a href="https://github.com/spiritLHLS/docker">点击跳转</a></p><h2 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h2><p>系统可安装docker即可用，网络能连接Github的raw界面就能用，硬件配置只要不拉跨就行，空闲硬盘有3G就行</p><p>推荐在开设NAT服务器前先增加部分SWAP虚拟内存，避免突发的内存占用导致母鸡卡死 <a href="https://github.com/spiritLHLS/addswap">跳转</a></p><h2 id="环境预设"><a href="#环境预设" class="headerlink" title="环境预设"></a>环境预设</h2><ul><li>检测环境</li><li>安装docker</li><li>下载预制脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/docker/main/scripts/pre_build.sh -o pre_build.sh &amp;&amp; chmod +x pre_build.sh &amp;&amp; bash pre_build.sh</span><br></pre></td></tr></table></figure><h2 id="单独开设"><a href="#单独开设" class="headerlink" title="单独开设"></a>单独开设</h2><p>下载脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/docker/main/scripts/onedocker.sh -o onedocker.sh &amp;&amp; chmod +x onedocker.sh</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./onedocker.sh name cpu memory password sshport startport endport system</span><br></pre></td></tr></table></figure><p>目前system仅支持选择alpine或debian，默认是debian</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>将开设1核512MB内存，root的密码是123456，SSH端口映射至外网25000，批量映射的端口区间为34975到35000，此区间内外网端口一致，系统为debian</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./onedocker.sh test 1 512 123456 25000 34975 35000 debian</span><br></pre></td></tr></table></figure><p>删除示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f test</span><br><span class="line">rm -rf test</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>进入示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it test /bin/bash</span><br></pre></td></tr></table></figure><h3 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 容器名字</span><br></pre></td></tr></table></figure><p>输出格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">容器名字 SSH端口 登陆的root密码 核数 内存 外网端口起 外网端口止</span><br></pre></td></tr></table></figure><h2 id="批量开设"><a href="#批量开设" class="headerlink" title="批量开设"></a>批量开设</h2><ul><li>批量多次运行继承配置生成</li><li>生成多个时为避免SSH连接中断建议在screen中执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/docker/main/scripts/dockers.sh -o dockers.sh &amp;&amp; chmod +x dockers.sh &amp;&amp; bash dockers.sh</span><br></pre></td></tr></table></figure><h2 id="卸载所有docker容器和镜像"><a href="#卸载所有docker容器和镜像" class="headerlink" title="卸载所有docker容器和镜像"></a>卸载所有docker容器和镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq); docker rmi $(docker images -aq)</span><br><span class="line">rm -rf dclog</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> docker </tag>
            
            <tag> nat </tag>
            
            <tag> 小鸡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alpine+V2Ray+Nginx+PHP探针+套CF</title>
      <link href="/posts/48c55392.html"/>
      <url>/posts/48c55392.html</url>
      
        <content type="html"><![CDATA[<p>碎碎念，开始！</p><p>前几天入手了VMOcean的32M&#x2F;64M的小鸡，其他的Linux玩不起来，只能整个alpine OS来折腾，效果还真别说，真不错！完全超出了0.5&#x2F;1刀每年的预期。。。好了，废话不说了，开整。</p><p>准备工作：</p><p>VMOcean家的OS模板有点问题，使用的Alpine3.16默认是没有ssh的，需要自己来折腾一下</p><p>登录noVNC，使用的是root和邮件里的密码登录（注意输入的密码是否正确，noVNC实际的输入可能跟预期的不一样，最好先在用户名的位置把密码输入检查一下，以确保密码的正确性）</p><p>如果实在不行的话，可以重置一下OS，那里会提示让你重新设置root密码</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305301124023.jpeg" alt="img"></p><p>默认已经用root账号登录系统了</p><p>安装使用dropbear，一个轻量级的ssh服务器端，直接运行下面的命令，不需要额外的配置，就可以用root登录了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add dropbear &amp;&amp; rc-update add dropbear &amp;&amp; rc-service dropbear start</span><br></pre></td></tr></table></figure><p>安装openssh-server，这个比dropbear要稍微麻烦一点点儿。完全看个人喜好，dropbear和openssh-server二选一就成了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apk add openssh-server &amp;&amp; rc-update add sshd （不熟的话，可以一个一个运行，熟悉一下运行输入的结果）</span><br><span class="line">echo &quot;PermitRootLogin yes&quot;&gt;&gt;/etc/ssh/sshd_config </span><br><span class="line">rc-service sshd start</span><br></pre></td></tr></table></figure><p>#安装ssh-server和将ssh加到默认启动的列表里，这样系统重启后，ssh也会默认启动</p><p> #ssh默认的配置是不允许root账号直接登录的，需要如此处理一下，或者自己到&#x2F;etc&#x2F;ssh&#x2F;sshd_config文件里找到对应的选项进行编辑</p><p>#启动ssh服务，现在就可以通过putty或者其他的客户端，通过默认提供的IPv4:Port或者IPv6默认端口进行连接。官方提供的<a href="https://www.vmocean.com/index.php?rp=/knowledgebase/1/IPv4-port-mapping-relationship-of-Nat-VPS.html">IPv4端口计算的方法</a></p><p>（PS：开始使用的命令是apk add openssh，这个默认会把ssh的client端也给安装上，看看自己的内存，还是把能不安装的都去除掉吧。）</p><p>准备工作完事，现在可以在putty或者其他的ssh客户端里开始折腾了。。。</p><p>v2ray安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apk add v2ray</span><br><span class="line">rm /etc/v2ray/config.json</span><br><span class="line">vi /etc/v2ray/config.json</span><br></pre></td></tr></table></figure><p>在alpine里，v2ray可以直接命令安装，默认的配置文件可以直接删除，然后把自己想用的配置文件放进去（vi命令运行完毕后，复制自己配置文件内容，键盘按下字母i，鼠标右键，内容复制完毕；键盘按下ESC，然后输入:wq，回车）。有些ssh客户端有文件传输的功能，也可以直接把配置文件编辑完毕后上传上去。</p><p>配置文件1，直接使用443端口+WS，套CF：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;inbounds&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;port&quot;: 443,</span><br><span class="line">   &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">   &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;clients&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">      &quot;id&quot;: &quot;UUID-xxx&quot;,</span><br><span class="line">      &quot;alterId&quot;: 0</span><br><span class="line">     &#125;</span><br><span class="line">    ]</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;streamSettings&quot;: &#123;</span><br><span class="line">    &quot;network&quot;: &quot;ws&quot;,</span><br><span class="line">    &quot;security&quot;: &quot;tls&quot;,</span><br><span class="line">    &quot;tlsSettings&quot;: &#123;</span><br><span class="line">     &quot;serverName&quot;: &quot;localhost&quot;,</span><br><span class="line">     &quot;certificates&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">       &quot;certificateFile&quot;: &quot;/v2/cert/localhost.crt&quot;,</span><br><span class="line">       &quot;keyFile&quot;: &quot;/v2/cert/localhost.key&quot;</span><br><span class="line">      &#125;</span><br><span class="line">     ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;wsSettings&quot;: &#123;</span><br><span class="line">     &quot;path&quot;: &quot;/Path/&quot;,</span><br><span class="line">     &quot;headers&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;outbounds&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">   &quot;settings&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果自己手上没有可用UUID的话，可以通过v2ctl uuid来生成一个随机的UUID（v2ray 4.x的版本，需要v2ctl来执行；最新的5.x版本里，生成随机UUID的工作可以通过v2ray来完成）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># v2ctl uuid</span><br><span class="line">67c5d2a9-fa63-ed5f-4c00-a1084d1ccb9f</span><br><span class="line"></span><br><span class="line">v2ray 5.x</span><br><span class="line"></span><br><span class="line"># v2ray uuid</span><br><span class="line">9c714576-ef94-dc32-ac33-308be673359e</span><br></pre></td></tr></table></figure><p>标红的位置需要自己的信息；域名和证书，需要自己来搞定。如果自己手里有有效的证书，可以直接使用有效的域名和证书；也可以自签名一个证书。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /v2/cert &amp;&amp; openssl req -x509 -nodes -days 36500 -newkey rsa:2048  -keyout /v2/cert/localhost.key -out /v2/cert/localhost.crt</span><br></pre></td></tr></table></figure><p>贴一个自己用的100年的自签名的命令，不建议在alpine里直接运行，毕竟还需要安装openssl，不给小鸡添加压力了，直接在其他的环境里运行并备份或者复制到alpine小鸡里。上面的标红位置自己DIY就成了。反正路径、文件名一致就成了。</p><p>CloudFlare里，在域名domain-name里加个aaaa记录，启用CDN，ssl的加密模式设置为Full就可以了。本文里使用的是自签名+CF的SSL加密模式Full，完全可以在domain1-name里，加条同样的aaaa记录，然后在domain1-name里像domain-name一样玩耍。无感在CF多个域名里来回切换。</p><p>如果你能保证证书有效性，也可以将SSL加密模式设置成Full (strict)。</p><p>对了，CF提供15年的CF自用证书，上文提到的证书文件，也完全可以替换成CF的。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#rc-service v2ray start</span><br><span class="line">#rc-service v2ray status</span><br></pre></td></tr></table></figure><p>启动v2ray并查看运行状态</p><p>最后在浏览器里访问<a href="https://domain-name/Path/%EF%BC%8C%E8%BF%94%E5%9B%9EBad">https://domain-name/Path/，返回Bad</a> Request就说明v2ray配置成功了。</p><p>配置文件2，需要Nignx、或者其他的程序反代：</p><p> config.json的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;inbounds&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;port&quot;: 10000,</span><br><span class="line">   &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">   &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;clients&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">      &quot;id&quot;: &quot;UUID-xxx&quot;,</span><br><span class="line">      &quot;alterId&quot;: 0</span><br><span class="line">     &#125;</span><br><span class="line">    ]</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;streamSettings&quot;: &#123;</span><br><span class="line">    &quot;network&quot;: &quot;ws&quot;,</span><br><span class="line">    &quot;security&quot;: &quot;&quot;,</span><br><span class="line">    &quot;wsSettings&quot;: &#123;</span><br><span class="line">     &quot;path&quot;: &quot;/Path/&quot;,</span><br><span class="line">     &quot;headers&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;outbounds&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">   &quot;settings&quot;: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，标红的位置需要换成自己的(这个配置文件，也可以作为vmess裸奔的配置，在端口10000上裸奔)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#rc-service v2ray start</span><br><span class="line">#rc-service v2ray status</span><br></pre></td></tr></table></figure><p>启动v2ray并查看运行状态 </p><p>PS: 这个配置文件里，没有指定listen IP地址，默认是监控所有IP的10000端口，如果需要的话，可以添加listen IP(“listen”:”127.0.0.1”,)的信息。</p><p><strong>安装nginx+php-fpm（用于网站+php单机探针）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add php-fpm &amp;&amp; rc-update add php-fpm8 &amp;&amp; rc-service php-fpm8 start</span><br></pre></td></tr></table></figure><p>安装个php-fpm就能保证php探针运行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">apk add nginx</span><br><span class="line"></span><br><span class="line">rm /etc/nginx/http.d/default.conf</span><br><span class="line"></span><br><span class="line">vi /etc/nginx/http.d/default.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl http2 default_server;</span><br><span class="line">  listen [::]:443 ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">  ssl_certificate /v2/cert/localhost.crt;</span><br><span class="line">  ssl_certificate_key /v2/cert/localhost.key;</span><br><span class="line"></span><br><span class="line">  ssl_session_timeout 1d;</span><br><span class="line">  ssl_session_cache shared:MozSSL:10m;</span><br><span class="line">  ssl_session_tickets off;</span><br><span class="line"></span><br><span class="line">  error_log  /dev/null;</span><br><span class="line">  access_log /dev/null;</span><br><span class="line"></span><br><span class="line">  root  /v2/www;</span><br><span class="line">  index  index.html index.php;</span><br><span class="line"></span><br><span class="line">  ssl_protocols  TLSv1.2 TLSv1.3;</span><br><span class="line">  ssl_ciphers    TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:EECDH+AESGCM:EDH+AESGCM:AES256+EDH;</span><br><span class="line">  ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">       fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">       fastcgi_index   index.php;</span><br><span class="line">       include      fastcgi.conf;</span><br><span class="line">  &#125;</span><br><span class="line">  location /ip &#123;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    return 200 &quot;Your IP address is: $remote_addr&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  location /Path/ &#123;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http://127.0.0.1:10000;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80 default_server;</span><br><span class="line">  listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">  error_log  /dev/null;</span><br><span class="line">  access_log /dev/null;</span><br><span class="line"></span><br><span class="line">  root  /v2/www;</span><br><span class="line">  index  index.html index.php;</span><br><span class="line"></span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">       fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">       fastcgi_index   index.php;</span><br><span class="line">       include      fastcgi.conf;</span><br><span class="line">  &#125;</span><br><span class="line">  location /ip &#123;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    return 200 &quot;Your IP address is: $remote_addr&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  location /Path/ &#123;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http://127.0.0.1:10000;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">  listen 12345 default_server;</span><br><span class="line">  listen [::]:12345 default_server;</span><br><span class="line"></span><br><span class="line">  error_log  /dev/null;</span><br><span class="line">  access_log /dev/null;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    default_type text/plain;</span><br><span class="line">    return 200 &quot;Your IP address is: $remote_addr&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  location /Path/ &#123;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http://127.0.0.1:10000;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于443和80端口，我把网站的根目录设置成&#x2F;v2&#x2F;www了，这个需要按照实际情况来编辑成自己的；把index.html或index.php作为首页，php单机探针文件也需要放在网站根目录，也可直接将探针的php文件名修改成index.php让其作为首页显示。最后在那个12345端口上，可以换成系统给分配的IPv4端口，根据自己的需求、结合上面的80和443进行DIY，这个去除了php配置，主页只显示一个字符串Your IP address is: xxxxx。</p><p>PS：配置文件里直接是default_server，就是为了一劳永逸，不是标准的做法；如果使用正常的域名和签名，就需要把server_name等啥的都给设置上。</p><p>最后运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rc-update add nginx &amp;&amp; rc-service nginx start</span><br><span class="line"></span><br><span class="line">rc-service v2ray status &amp;&amp; rc-service nginx status</span><br></pre></td></tr></table></figure><p>最后看一下v2ray和nginx是否正常运行。</p><p>现在可以直接通过浏览器访问网站了。（某些情况下，可能需要一个扶墙的环境）测试v2ray：</p><p>浏览器里访问<a href="https://domain-name/Path/%EF%BC%8Chttp://domain-name/Path/%E6%88%96%E8%80%85http://ip-address:12345/Path/%E8%BF%94%E5%9B%9EBad">https://domain-name/Path/，http://domain-name/Path/或者http://ip-address:12345/Path/返回Bad</a> Request就说明v2ray配置成功了。</p><p>放只32M的小鸡，vmess的连接就不放了</p><p><a href="https://vm.maverick.tk/">https://vm.maverick.tk/</a></p><p><a href="https://vm.maverick.tk/tz.php">https://vm.maverick.tk/tz.php</a></p><p><a href="https://vm.maverick.tk/tz1.php">https://vm.maverick.tk/tz1.php</a></p><p>alpine小鸡的更新重启命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apk update &amp;&amp; apk upgrade &amp;&amp; sync &amp;&amp; reboot </span><br><span class="line"></span><br><span class="line">（32M的小鸡直接运行可能会失败，可以将一些服务给停掉然后再运行）</span><br><span class="line">rc-service v2ray stop &amp;&amp; rc-service nginx stop &amp;&amp; rc-service php-fpm8 stop &amp;&amp; apk update &amp;&amp; apk upgrade &amp;&amp; sync &amp;&amp; reboot</span><br></pre></td></tr></table></figure><p>刚才发现alpine3.17发布了，再贴点命令，来升级alpine版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apk update &amp;&amp; apk upgrade alpine-keys</span><br><span class="line">sed -i &#x27;s/v3.1./v3.17/g&#x27; /etc/apk/repositories</span><br><span class="line">apk upgrade -a</span><br></pre></td></tr></table></figure><p>尽情折腾吧，少年！</p><p>以下内容跟alpine无关。。。。。。</p><p>PS：关于v2ray的 client需要主意一下，alpine3.16内置的那个v2ray版本比较低，手机上的最新v2rayNG无法使用，不过SagerNet可以正常使用；Window上的v2rayN，注意修改一下内核，使用SagerNet或者v2fly的内核（非v2fly_v5）。</p><p>v2ray linux上最新的v4版本的一键安装命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) --version v4.45.2</span><br><span class="line">systemctl enable v2ray &amp;&amp; systemctl start v2ray</span><br><span class="line"></span><br><span class="line">或者分解开为：</span><br><span class="line"></span><br><span class="line">curl -L -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh</span><br><span class="line">bash install-release.sh --version v4.45.2</span><br><span class="line">systemctl enable v2ray &amp;&amp; systemctl start v2ray</span><br></pre></td></tr></table></figure><p>我再贴一下linux里的client端用的配置文件吧</p><p>v2ray运行的配置文件放在这里 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/etc/v2ray/config.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;inbounds&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;port&quot;: 1080,</span><br><span class="line">   &quot;protocol&quot;: &quot;socks&quot;,</span><br><span class="line">   &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;auth&quot;: &quot;noauth&quot;,</span><br><span class="line">    &quot;udp&quot;: true</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">   &quot;port&quot;: 1081,</span><br><span class="line">   &quot;protocol&quot;: &quot;http&quot;,</span><br><span class="line">   &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;udp&quot;: true</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;outbounds&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">   &quot;mux&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;concurrency&quot;: 8</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">   &quot;streamSettings&quot;: &#123;</span><br><span class="line">    &quot;wsSettings&quot;: &#123;</span><br><span class="line">     &quot;path&quot;: &quot;/Path/&quot;,</span><br><span class="line">     &quot;headers&quot;: &#123;</span><br><span class="line">      &quot;host&quot;: &quot;domain-name&quot;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tlsSettings&quot;: &#123;</span><br><span class="line">     &quot;serverName&quot;: &quot;domain-name&quot;,</span><br><span class="line">     &quot;allowInsecure&quot;: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;security&quot;: &quot;tls&quot;,</span><br><span class="line">    &quot;network&quot;: &quot;ws&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;vnext&quot;: [</span><br><span class="line">     &#123;</span><br><span class="line">      &quot;address&quot;: &quot;CF-DIY-Domain&quot;,</span><br><span class="line">      &quot;users&quot;: [</span><br><span class="line">       &#123;</span><br><span class="line">        &quot;encryption&quot;: &quot;none&quot;,</span><br><span class="line">        &quot;id&quot;: &quot;UUID-XXX&quot;,</span><br><span class="line">        &quot;level&quot;: 0</span><br><span class="line">       &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;port&quot;: 443</span><br><span class="line">     &#125;</span><br><span class="line">    ]</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标红的地方需要换成自己的，CF-DIY-Domain那里，是可以换成CF自选IP或者其他优质的CF域名；至于为啥整个虚拟机来运行v2ray客户端，那是因为主机可能某些原因被安装一些监控的软件，直接放在linux虚拟机里，安全性在理论上是会多一些，毕竟linux虚拟机，自己装的，一般情况下其他人是看不到里面是些啥的。</p><p>补充：</p><p>Alpine从3.16升级到3.17后，v2ray可能会出现莫名的crashed，启动不起来，检查了下，升级的过程中，v2ray版本4.45.0-r5 -&gt; 5.1.0-r2，配置文件改动比较大，需要修改一下&#x2F;etc&#x2F;init.d&#x2F;v2ray文件，然后重启v2ray就行了。（PS：试了下把我的Alpine从3.16升级到3.17，v2ray的init.d文件也修改完毕；试了下手机客户端，v2rayNG依旧不好用；SagerNet依旧好用！PC端：试了下最新的v2rayN v6.6，xray最新内核不好用，其余三个（v2fly, SagerNet, v2fly_v5）内核好用。）</p><p><strong>#vi &#x2F;etc&#x2F;init.d&#x2F;v2ray</strong></p><p>#!&#x2F;sbin&#x2F;openrc-run<br># Copyright 1999-2018 Gentoo Foundation<br># Distributed under the terms of the GNU General Public License v2</p><p>V2_CONFIG&#x3D;”<strong>&#x2F;etc&#x2F;v2ray</strong>“<br>V2_PIDFILE&#x3D;”&#x2F;run&#x2F;v2ray.pid”<br>V2_LOG&#x3D;”&#x2F;var&#x2F;log&#x2F;v2ray.log”</p><p>depend() {<br>    need net<br>}</p><p>checkconfig() {<br>    if [ ! -f ${V2_CONFIG} ]; then<br>        ewarn “${V2_CONFIG} does not exist.”<br>    fi<br>}</p><p>start() {<br>    checkconfig || return 1</p><p>​    ebegin “Starting V2ray”<br>​    ebegin “Log File : ${V2_LOG}”<br>​    start-stop-daemon –start    <br>​    -b -1 ${V2_LOG} -2 ${V2_LOG}  <br>​    -m -p ${V2_PIDFILE}       <br>​    –exec &#x2F;usr&#x2F;bin&#x2F;v2ray <strong>run -d</strong> ${V2_CONFIG}<br>​    eend $?</p><p>}</p><p>stop() {<br>    ebegin “Stopping V2ray”<br>    start-stop-daemon –stop -p ${V2_PIDFILE}<br>    eend $?<br>}</p><p>两处加粗部分修改，正常的话v2ray run后面需要加-c或者-config &#x2F;etc&#x2F;v2ray&#x2F;config.json；但不知什么原因，一直出错，所以修改一下，使用run -d，直接指向&#x2F;etc&#x2F;v2ray文件夹，会直接加载此目录下的所有json文件；你可以清空这个目录，只保留config.json文件，最后执行下面的命令，重启v2ray，查看状态</p><p>PS：如果一切运行OK，可以将&#x2F;var&#x2F;log&#x2F;v2ray.log变成&#x2F;dev&#x2F;null，不记录日志，减少小鸡负担</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc-service v2ray restart &amp;&amp; rc-service v2ray status</span><br></pre></td></tr></table></figure><p> PS：升级Alpine后，Nginx里的php探针有可能会失效，检查了一下，是php-fpm版本变化了，处理方式如下。大版本升级过程中，如果其他软件有类似的情况，也可以参考解决。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc-update del php-fpm8 &amp;&amp; rc-update add php-fpm81 &amp;&amp; rc-service php-fpm81 start</span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://blog.xserv.eu.org/2022/11/32m64mv2ray.html">https://blog.xserv.eu.org/2022/11/32m64mv2ray.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cf </tag>
            
            <tag> cloudflare </tag>
            
            <tag> 探针 </tag>
            
            <tag> alpine </tag>
            
            <tag> v2ray </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft Learn 临时免费云电脑使用教程及评测</title>
      <link href="/posts/7975d21a.html"/>
      <url>/posts/7975d21a.html</url>
      
        <content type="html"><![CDATA[<p>在部分环境中，我们不太方便使用软件来访问外网资源。而我们可以使用外国的云电脑，来访问外网的资源。但是大部分的云电脑需要收费。在这里，我发现了微软提供的云电脑，每次可以使用2小时，并且可以无限次申请使用。在这篇文章中，我来和大家一起来申请微软的免费云电脑</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>微软账户</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>打开这个网站：<a href="https://learn.microsoft.com/zh-cn/training/modules/implement-common-integration-features-finance-ops/10-exercise-1">https://learn.microsoft.com/zh-cn/training/modules/implement-common-integration-features-finance-ops/10-exercise-1</a> ，点击“登录并启用 VM 模式”</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305301113410.png" alt="img"></p><ol start="2"><li>登录之后，云电脑会自动加载。进入“Resources”页面，点击“Password”前面的<code>T</code>按钮进行输入密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305301109601.png" alt="img"></p><ol start="3"><li>进入云电脑成功</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305301109294.png" alt="img"></p><ol start="4"><li>可以看下云电脑的配置还是挺好的</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305301113179.png" alt="img"></p><ol start="5"><li>测试下网速，可以看到是限速100M了。不过对于一般用途来讲也够用了</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305301109490.png" alt="img"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>请勿滥用本项目</li><li>云电脑网络配置有规则，部分网站访问不了</li></ul><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/05/30/mslearn-temp-pc/">https://blog.misaka.rest/2023/05/30/mslearn-temp-pc/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 免费 </tag>
            
            <tag> microsoft </tag>
            
            <tag> learn </tag>
            
            <tag> 云电脑 </tag>
            
            <tag> 评测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在CloudFlare Workers搭建VLESS节点</title>
      <link href="/posts/aa969a82.html"/>
      <url>/posts/aa969a82.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本项目有封号风险，请谨慎部署</p></blockquote><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>CloudFlare 账号</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>请勿滥用本项目！</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>打开CF的控制台，转到“Workers &amp; Pages”页面，点击“Create Application”按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305261024994.png" alt="img"></p><ol start="2"><li>点击“Create Worker”按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305261021516.png" alt="img"></p><ol start="3"><li>设置workers的名称，点击“Deploy”按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305261025563.png" alt="img"></p><ol start="4"><li>点击“Configure Worker”按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305261025546.png" alt="img"></p><ol start="5"><li>点击“Quick Edit”按钮，修改代码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305261028221.png" alt="img"></p><ol start="6"><li>将提供的代码的244行的UUID，修改为自己的UUID（可选），并复制到Workers中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br></pre></td><td class="code"><pre><span class="line">JAVASCRIPT</span><br><span class="line">// ../node_modules/uuid/dist/esm-browser/regex.js</span><br><span class="line">var regex_default = /^(?:[0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-[1-5][0-9a-f]&#123;3&#125;-[89ab][0-9a-f]&#123;3&#125;-[0-9a-f]&#123;12&#125;|00000000-0000-0000-0000-000000000000)$/i;</span><br><span class="line"></span><br><span class="line">// ../node_modules/uuid/dist/esm-browser/validate.js</span><br><span class="line">function validate(uuid) &#123;</span><br><span class="line">  return typeof uuid === &quot;string&quot; &amp;&amp; regex_default.test(uuid);</span><br><span class="line">&#125;</span><br><span class="line">var validate_default = validate;</span><br><span class="line"></span><br><span class="line">// ../node_modules/uuid/dist/esm-browser/stringify.js</span><br><span class="line">var byteToHex = [];</span><br><span class="line">for (let i = 0; i &lt; 256; ++i) &#123;</span><br><span class="line">  byteToHex.push((i + 256).toString(16).slice(1));</span><br><span class="line">&#125;</span><br><span class="line">function unsafeStringify(arr, offset = 0) &#123;</span><br><span class="line">  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + &quot;-&quot; + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + &quot;-&quot; + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + &quot;-&quot; + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + &quot;-&quot; + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line">function stringify(arr, offset = 0) &#123;</span><br><span class="line">  const uuid = unsafeStringify(arr, offset);</span><br><span class="line">  if (!validate_default(uuid)) &#123;</span><br><span class="line">    throw TypeError(&quot;Stringified UUID is invalid&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  return uuid;</span><br><span class="line">&#125;</span><br><span class="line">var stringify_default = stringify;</span><br><span class="line"></span><br><span class="line">// vless-js/lib/vless-js.ts</span><br><span class="line">var WS_READY_STATE_OPEN = 1;</span><br><span class="line">function makeReadableWebSocketStream(ws, earlyDataHeader, log) &#123;</span><br><span class="line">  let readableStreamCancel = false;</span><br><span class="line">  return new ReadableStream(&#123;</span><br><span class="line">    start(controller) &#123;</span><br><span class="line">      ws.addEventListener(&quot;message&quot;, async (e) =&gt; &#123;</span><br><span class="line">        if (readableStreamCancel) &#123;</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        const vlessBuffer = e.data;</span><br><span class="line">        controller.enqueue(vlessBuffer);</span><br><span class="line">      &#125;);</span><br><span class="line">      ws.addEventListener(&quot;error&quot;, (e) =&gt; &#123;</span><br><span class="line">        log(&quot;socket has error&quot;);</span><br><span class="line">        readableStreamCancel = true;</span><br><span class="line">        controller.error(e);</span><br><span class="line">      &#125;);</span><br><span class="line">      ws.addEventListener(&quot;close&quot;, () =&gt; &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          log(&quot;webSocket is close&quot;);</span><br><span class="line">          if (readableStreamCancel) &#123;</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br><span class="line">          controller.close();</span><br><span class="line">        &#125; catch (error2) &#123;</span><br><span class="line">          log(`websocketStream can&#x27;t close DUE to `, error2);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      const &#123; earlyData, error &#125; = base64ToArrayBuffer(earlyDataHeader);</span><br><span class="line">      if (error) &#123;</span><br><span class="line">        log(`earlyDataHeader has invaild base64`);</span><br><span class="line">        safeCloseWebSocket(ws);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (earlyData) &#123;</span><br><span class="line">        controller.enqueue(earlyData);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    pull(controller) &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    cancel(reason) &#123;</span><br><span class="line">      log(`websocketStream is cancel DUE to `, reason);</span><br><span class="line">      if (readableStreamCancel) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      readableStreamCancel = true;</span><br><span class="line">      safeCloseWebSocket(ws);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">function base64ToArrayBuffer(base64Str) &#123;</span><br><span class="line">  if (!base64Str) &#123;</span><br><span class="line">    return &#123; error: null &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  try &#123;</span><br><span class="line">    base64Str = base64Str.replace(/-/g, &quot;+&quot;).replace(/_/g, &quot;/&quot;);</span><br><span class="line">    const decode = atob(base64Str);</span><br><span class="line">    const arryBuffer = Uint8Array.from(decode, (c) =&gt; c.charCodeAt(0));</span><br><span class="line">    return &#123; earlyData: arryBuffer.buffer, error: null &#125;;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    return &#123; error &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function safeCloseWebSocket(socket) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    if (socket.readyState === WS_READY_STATE_OPEN) &#123;</span><br><span class="line">      socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&quot;safeCloseWebSocket error&quot;, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function processVlessHeader(vlessBuffer, userID) &#123;</span><br><span class="line">  if (vlessBuffer.byteLength &lt; 24) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hasError: true,</span><br><span class="line">      message: &quot;invalid data&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  const version = new Uint8Array(vlessBuffer.slice(0, 1));</span><br><span class="line">  let isValidUser = false;</span><br><span class="line">  let isUDP = false;</span><br><span class="line">  if (stringify_default(new Uint8Array(vlessBuffer.slice(1, 17))) === userID) &#123;</span><br><span class="line">    isValidUser = true;</span><br><span class="line">  &#125;</span><br><span class="line">  if (!isValidUser) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hasError: true,</span><br><span class="line">      message: &quot;invalid user&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  const optLength = new Uint8Array(vlessBuffer.slice(17, 18))[0];</span><br><span class="line">  const command = new Uint8Array(</span><br><span class="line">    vlessBuffer.slice(18 + optLength, 18 + optLength + 1)</span><br><span class="line">  )[0];</span><br><span class="line">  if (command === 1) &#123;</span><br><span class="line">  &#125; else if (command === 2) &#123;</span><br><span class="line">    isUDP = true;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hasError: true,</span><br><span class="line">      message: `command $&#123;command&#125; is not support, command 01-tcp,02-udp,03-mux`</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  const portIndex = 18 + optLength + 1;</span><br><span class="line">  const portBuffer = vlessBuffer.slice(portIndex, portIndex + 2);</span><br><span class="line">  const portRemote = new DataView(portBuffer).getInt16(0);</span><br><span class="line">  let addressIndex = portIndex + 2;</span><br><span class="line">  const addressBuffer = new Uint8Array(</span><br><span class="line">    vlessBuffer.slice(addressIndex, addressIndex + 1)</span><br><span class="line">  );</span><br><span class="line">  const addressType = addressBuffer[0];</span><br><span class="line">  let addressLength = 0;</span><br><span class="line">  let addressValueIndex = addressIndex + 1;</span><br><span class="line">  let addressValue = &quot;&quot;;</span><br><span class="line">  switch (addressType) &#123;</span><br><span class="line">    case 1:</span><br><span class="line">      addressLength = 4;</span><br><span class="line">      addressValue = new Uint8Array(</span><br><span class="line">        vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)</span><br><span class="line">      ).join(&quot;.&quot;);</span><br><span class="line">      break;</span><br><span class="line">    case 2:</span><br><span class="line">      addressLength = new Uint8Array(</span><br><span class="line">        vlessBuffer.slice(addressValueIndex, addressValueIndex + 1)</span><br><span class="line">      )[0];</span><br><span class="line">      addressValueIndex += 1;</span><br><span class="line">      addressValue = new TextDecoder().decode(</span><br><span class="line">        vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)</span><br><span class="line">      );</span><br><span class="line">      break;</span><br><span class="line">    case 3:</span><br><span class="line">      addressLength = 16;</span><br><span class="line">      const dataView = new DataView(</span><br><span class="line">        vlessBuffer.slice(addressValueIndex, addressValueIndex + addressLength)</span><br><span class="line">      );</span><br><span class="line">      const ipv6 = [];</span><br><span class="line">      for (let i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">        ipv6.push(dataView.getUint16(i * 2).toString(16));</span><br><span class="line">      &#125;</span><br><span class="line">      addressValue = ipv6.join(&quot;:&quot;);</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      console.log(`invild  addressType is $&#123;addressType&#125;`);</span><br><span class="line">  &#125;</span><br><span class="line">  if (!addressValue) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      hasError: true,</span><br><span class="line">      message: `addressValue is empty, addressType is $&#123;addressType&#125;`</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  return &#123;</span><br><span class="line">    hasError: false,</span><br><span class="line">    addressType,</span><br><span class="line">    addressRemote: addressValue,</span><br><span class="line">    portRemote,</span><br><span class="line">    rawDataIndex: addressValueIndex + addressLength,</span><br><span class="line">    vlessVersion: version,</span><br><span class="line">    isUDP</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// index.ts</span><br><span class="line">import &#123; connect &#125; from &quot;cloudflare:sockets&quot;;</span><br><span class="line"></span><br><span class="line">// dns.ts</span><br><span class="line">var doh = &quot;https://cloudflare-dns.com/dns-query&quot;;</span><br><span class="line">var dns = async (domain) =&gt; &#123;</span><br><span class="line">  const response = await fetch(`$&#123;doh&#125;?name=$&#123;domain&#125;`, &#123;</span><br><span class="line">    method: &quot;GET&quot;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &quot;Accept&quot;: &quot;application/dns-json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  const data = await response.json();</span><br><span class="line">  const ans = data?.Answer;</span><br><span class="line">  return ans?.find((record) =&gt; record.type === 1)?.data;</span><br><span class="line">&#125;;</span><br><span class="line">var isCloudFlareIP = (ip) =&gt; &#123;</span><br><span class="line">  const CFIP = [</span><br><span class="line">    [2918526976, -4096],</span><br><span class="line">    [1729491968, -1024],</span><br><span class="line">    [1729546240, -1024],</span><br><span class="line">    [1730085888, -1024],</span><br><span class="line">    [2372222976, -16384],</span><br><span class="line">    [1822605312, -16384],</span><br><span class="line">    [3193827328, -4096],</span><br><span class="line">    [3161612288, -4096],</span><br><span class="line">    [3320508416, -1024],</span><br><span class="line">    [3324608512, -32768],</span><br><span class="line">    [2728263680, -131072],</span><br><span class="line">    [1745879040, -524288],</span><br><span class="line">    [1746403328, -262144],</span><br><span class="line">    [2889875456, -524288],</span><br><span class="line">    [2197833728, -1024]</span><br><span class="line">  ];</span><br><span class="line">  const isIp4InCidr = (ip2, cidr) =&gt; &#123;</span><br><span class="line">    const [a, b, c, d] = ip2.split(&quot;.&quot;).map(Number);</span><br><span class="line">    ip2 = a &lt;&lt; 24 | b &lt;&lt; 16 | c &lt;&lt; 8 | d;</span><br><span class="line">    const [range, mask] = cidr;</span><br><span class="line">    return (ip2 &amp; mask) === range;</span><br><span class="line">  &#125;;</span><br><span class="line">  return CFIP.some((cidr) =&gt; isIp4InCidr(ip, cidr));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// index.ts</span><br><span class="line">var HTML404 = &quot;Script by zizifn, modified by MisakaNo&quot;;</span><br><span class="line">function delay2(ms) &#123;</span><br><span class="line">  return new Promise((resolve, rej) =&gt; &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">var workers_default = &#123;</span><br><span class="line">  async fetch(request, env, ctx) &#123;</span><br><span class="line">    let address = &quot;&quot;;</span><br><span class="line">    let portWithRandomLog = &quot;&quot;;</span><br><span class="line">    const userID = env.UUID || &quot;3e036e57-4d74-469a-b312-b97b59680ec3&quot;;</span><br><span class="line">    const log = (info, event) =&gt; &#123;</span><br><span class="line">      console.log(`[$&#123;address&#125;:$&#123;portWithRandomLog&#125;] $&#123;info&#125;`, event || &quot;&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    const upgradeHeader = request.headers.get(&quot;Upgrade&quot;);</span><br><span class="line">    if (!upgradeHeader || upgradeHeader !== &quot;websocket&quot;) &#123;</span><br><span class="line">      return new Response(HTML404, &#123;</span><br><span class="line">        status: 404,</span><br><span class="line">        headers: new Headers(&#123; &quot;Content-Type&quot;: &quot;text/html&quot; &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const webSocketPair = new WebSocketPair();</span><br><span class="line">    const [client, webSocket] = Object.values(webSocketPair);</span><br><span class="line">    const earlyDataHeader = request.headers.get(&quot;sec-websocket-protocol&quot;) || &quot;&quot;;</span><br><span class="line">    let remoteSocket = null;</span><br><span class="line">    webSocket.accept();</span><br><span class="line">    const readableWebSocketStream = makeReadableWebSocketStream(</span><br><span class="line">      webSocket,</span><br><span class="line">      earlyDataHeader,</span><br><span class="line">      log</span><br><span class="line">    );</span><br><span class="line">    let vlessResponseHeader = new Uint8Array([0, 0]);</span><br><span class="line">    let remoteConnectionReadyResolve;</span><br><span class="line">    readableWebSocketStream.pipeTo(</span><br><span class="line">      new WritableStream(&#123;</span><br><span class="line">        async write(chunk, controller) &#123;</span><br><span class="line">          if (remoteSocket) &#123;</span><br><span class="line">            const writer2 = remoteSocket.writable.getWriter();</span><br><span class="line">            await writer2.write(chunk);</span><br><span class="line">            writer2.releaseLock();</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br><span class="line">          const &#123;</span><br><span class="line">            hasError,</span><br><span class="line">            message,</span><br><span class="line">            portRemote,</span><br><span class="line">            addressType,</span><br><span class="line">            addressRemote,</span><br><span class="line">            rawDataIndex,</span><br><span class="line">            vlessVersion,</span><br><span class="line">            isUDP</span><br><span class="line">          &#125; = processVlessHeader(chunk, userID);</span><br><span class="line">          address = addressRemote || &quot;&quot;;</span><br><span class="line">          portWithRandomLog = `$&#123;portRemote&#125; -- $&#123;isUDP ? &quot;udp &quot; : &quot;tcp &quot;&#125; `;</span><br><span class="line">          if (isUDP &amp;&amp; portRemote != 53) &#123;</span><br><span class="line">            controller.error(&quot;UDP proxy only enable for DNS which is port 53&quot;);</span><br><span class="line">            webSocket.close();</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br><span class="line">          if (hasError) &#123;</span><br><span class="line">            controller.error(message);</span><br><span class="line">            webSocket.close();</span><br><span class="line">            return;</span><br><span class="line">          &#125;</span><br><span class="line">          vlessResponseHeader = new Uint8Array([vlessVersion[0], 0]);</span><br><span class="line">          const rawClientData = chunk.slice(rawDataIndex);</span><br><span class="line">          let queryip = &quot;&quot;;</span><br><span class="line">          if (addressType === 2) &#123;</span><br><span class="line">            queryip = await dns(addressRemote);</span><br><span class="line">            if (queryip &amp;&amp; isCloudFlareIP(queryip)) &#123;</span><br><span class="line">              queryip = &quot;64.68.192.&quot; + Math.floor(Math.random() * 255);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          remoteSocket = connect(&#123;</span><br><span class="line">            hostname: queryip ? queryip : addressRemote,</span><br><span class="line">            port: portRemote</span><br><span class="line">          &#125;);</span><br><span class="line">          log(`connected`);</span><br><span class="line">          const writer = remoteSocket.writable.getWriter();</span><br><span class="line">          await writer.write(rawClientData);</span><br><span class="line">          writer.releaseLock();</span><br><span class="line">          remoteConnectionReadyResolve(remoteSocket);</span><br><span class="line">        &#125;,</span><br><span class="line">        close() &#123;</span><br><span class="line">          console.log(</span><br><span class="line">            `[$&#123;address&#125;:$&#123;portWithRandomLog&#125;] readableWebSocketStream is close`</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        abort(reason) &#123;</span><br><span class="line">          console.log(</span><br><span class="line">            `[$&#123;address&#125;:$&#123;portWithRandomLog&#125;] readableWebSocketStream is abort`,</span><br><span class="line">            JSON.stringify(reason)</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    (async () =&gt; &#123;</span><br><span class="line">      await new Promise((resolve) =&gt; remoteConnectionReadyResolve = resolve);</span><br><span class="line">      let count = 0;</span><br><span class="line">      remoteSocket.readable.pipeTo(</span><br><span class="line">        new WritableStream(&#123;</span><br><span class="line">          start() &#123;</span><br><span class="line">            if (webSocket.readyState === WebSocket.READY_STATE_OPEN) &#123;</span><br><span class="line">              webSocket.send(vlessResponseHeader);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          async write(chunk, controller) &#123;</span><br><span class="line">            if (webSocket.readyState === WebSocket.READY_STATE_OPEN) &#123;</span><br><span class="line">              if (count++ &gt; 2e4) &#123;</span><br><span class="line">                await delay2(1);</span><br><span class="line">              &#125;</span><br><span class="line">              webSocket.send(chunk);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              controller.error(</span><br><span class="line">                &quot;webSocket.readyState is not open, maybe close&quot;</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          close() &#123;</span><br><span class="line">            console.log(</span><br><span class="line">              `[$&#123;address&#125;:$&#123;portWithRandomLog&#125;] remoteConnection!.readable is close`</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          abort(reason) &#123;</span><br><span class="line">            console.error(</span><br><span class="line">              `[$&#123;address&#125;:$&#123;portWithRandomLog&#125;] remoteConnection!.readable abort`,</span><br><span class="line">              reason</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      ).catch((error) =&gt; &#123;</span><br><span class="line">        console.error(</span><br><span class="line">          `[$&#123;address&#125;:$&#123;portWithRandomLog&#125;] processWebSocket has exception `,</span><br><span class="line">          error.stack || error</span><br><span class="line">        );</span><br><span class="line">        safeCloseWebSocket2(webSocket);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)();</span><br><span class="line">    return new Response(null, &#123;</span><br><span class="line">      status: 101,</span><br><span class="line">      webSocket: client</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">function safeCloseWebSocket2(ws) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    if (ws.readyState !== WebSocket.READY_STATE_CLOSED) &#123;</span><br><span class="line">      ws.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&quot;safeCloseWebSocket error&quot;, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export &#123;</span><br><span class="line">  workers_default as default</span><br><span class="line">&#125;;</span><br><span class="line">//# sourceMappingURL=index.js.map</span><br></pre></td></tr></table></figure><ol start="7"><li>点击“Save and deploy”按钮，保存代码。然后复制workers地址备用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305261021676.png" alt="img"></p><ol start="8"><li>节点配置如下</li></ol><ul><li>非TLS（可适用于无域名情况）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">协议：Vless</span><br><span class="line">地址：CF优选IP / 域名</span><br><span class="line">端口：80 或 CF 支持的 HTTPS 端口</span><br><span class="line">UUID/密码：设置的UUID（如未设置则为 `3e036e57-4d74-469a-b312-b97b59680ec3`）</span><br><span class="line">传输协议：ws</span><br><span class="line">伪装域名：设置的 Workers 自定义域名</span><br><span class="line">路径：/</span><br></pre></td></tr></table></figure><ul><li>TLS（仅限自定义域名）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">协议：Vless</span><br><span class="line">地址：CF优选IP / 域名</span><br><span class="line">端口：443 或 CF 支持的 HTTPS 端口</span><br><span class="line">UUID/密码：设置的UUID（如未设置则为 `3e036e57-4d74-469a-b312-b97b59680ec3`）</span><br><span class="line">传输协议：ws</span><br><span class="line">伪装域名：设置的 Workers 自定义域名</span><br><span class="line">路径：/</span><br><span class="line">传输安全：TLS</span><br><span class="line">跳过证书验证：true 或 false 都可以</span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/05/26/cf-wkrs-vless/">https://blog.misaka.rest/2023/05/26/cf-wkrs-vless/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> cf </tag>
            
            <tag> cloudflare </tag>
            
            <tag> vless </tag>
            
            <tag> workers </tag>
            
            <tag> 节点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甲骨文Oracle开区时间及AMD类型</title>
      <link href="/posts/cd3afdd8.html"/>
      <url>/posts/cd3afdd8.html</url>
      
        <content type="html"><![CDATA[<p>甲骨文是一家做数据库的巨头公司。后来亚马逊、微软谷歌等美国巨头公司推出了自己的云计算服务，甲骨文也做了云计算服务。其它巨头推出免费试用一年，甲骨文2019年9月推出永久免费服务。</p><p>本文介绍的是甲骨文Oracle开区时间及永久免费AMD类型。</p><blockquote><p>目前新加坡的AMD比较难开。</p></blockquote><h2 id="Asia-Pacific"><a href="#Asia-Pacific" class="headerlink" title="Asia-Pacific"></a>Asia-Pacific</h2><h4 id="海得拉巴"><a href="#海得拉巴" class="headerlink" title="海得拉巴"></a>海得拉巴</h4><p>2020年4月30日开区，永久免费的AMD是7551</p><h4 id="孟买"><a href="#孟买" class="headerlink" title="孟买"></a>孟买</h4><p>2019年7月26日开区，永久免费的AMD是7551</p><h4 id="墨尔本"><a href="#墨尔本" class="headerlink" title="墨尔本"></a>墨尔本</h4><p>2020年2月1日开区，永久免费的AMD是7551</p><h4 id="悉尼"><a href="#悉尼" class="headerlink" title="悉尼"></a>悉尼</h4><p>2019年8月30日开区，永久免费的AMD是7551</p><h4 id="新加坡"><a href="#新加坡" class="headerlink" title="新加坡"></a>新加坡</h4><p>2021年10月31日开区，永久免费的AMD是7742&#x2F;7j13</p><h4 id="大阪"><a href="#大阪" class="headerlink" title="大阪"></a>大阪</h4><p>2020年1月24日开区，永久免费的AMD是7551</p><h4 id="东京"><a href="#东京" class="headerlink" title="东京"></a>东京</h4><p>2019年4月30日开区，永久免费的AMD是7551</p><h4 id="春川"><a href="#春川" class="headerlink" title="春川"></a>春川</h4><p>2020年5月29日开区，永久免费的AMD是7751</p><h4 id="首尔"><a href="#首尔" class="headerlink" title="首尔"></a>首尔</h4><p>2019年5月13日开区，永久免费的AMD是7551</p><h2 id="Europe"><a href="#Europe" class="headerlink" title="Europe"></a>Europe</h2><h4 id="米兰"><a href="#米兰" class="headerlink" title="米兰"></a>米兰</h4><p>2021年11月30日开区，永久免费的AMD是7742</p><h4 id="苏黎世"><a href="#苏黎世" class="headerlink" title="苏黎世"></a>苏黎世</h4><p>2019年8月2日开区，永久免费的AMD是7551</p><h4 id="阿姆斯特丹"><a href="#阿姆斯特丹" class="headerlink" title="阿姆斯特丹"></a>阿姆斯特丹</h4><p>2020年2月1日开区，永久免费的AMD是7551</p><h4 id="耶路撒冷"><a href="#耶路撒冷" class="headerlink" title="耶路撒冷"></a>耶路撒冷</h4><p>2021年10月11日开区，永久免费的AMD是7742</p><h4 id="巴黎"><a href="#巴黎" class="headerlink" title="巴黎"></a>巴黎</h4><p>2022年6月1日开区，永久免费的AMD是7J13</p><h4 id="马赛"><a href="#马赛" class="headerlink" title="马赛"></a>马赛</h4><p>2021年10月31日开区，永久免费的AMD是7742</p><h4 id="法兰克福"><a href="#法兰克福" class="headerlink" title="法兰克福"></a>法兰克福</h4><p>2018年开区，永久免费的AMD是7551</p><h4 id="加的夫"><a href="#加的夫" class="headerlink" title="加的夫"></a>加的夫</h4><p>2018年开区，永久免费的AMD是7551</p><h4 id="伦敦"><a href="#伦敦" class="headerlink" title="伦敦"></a>伦敦</h4><p>2018年开区，永久免费的AMD是7551</p><h4 id="马德里"><a href="#马德里" class="headerlink" title="马德里"></a>马德里</h4><p>2022年9月13日开区，永久免费的AMD是7J13，暂无ARM</p><h4 id="斯德哥尔摩"><a href="#斯德哥尔摩" class="headerlink" title="斯德哥尔摩"></a>斯德哥尔摩</h4><p>2021年12月17日开区，永久免费的AMD是7742</p><h2 id="North-America"><a href="#North-America" class="headerlink" title="North America"></a>North America</h2><h4 id="蒙特利尔"><a href="#蒙特利尔" class="headerlink" title="蒙特利尔"></a>蒙特利尔</h4><p>2020年3月1日开区，永久免费的AMD是7551</p><h4 id="多伦多"><a href="#多伦多" class="headerlink" title="多伦多"></a>多伦多</h4><p>2019年1月17日开区，永久免费的AMD是7551</p><h4 id="阿什本"><a href="#阿什本" class="headerlink" title="阿什本"></a>阿什本</h4><p>2018年开区，永久免费的AMD是7551</p><h4 id="凤凰城"><a href="#凤凰城" class="headerlink" title="凤凰城"></a>凤凰城</h4><p>2018年开区，永久免费的AMD是7551</p><h4 id="圣何塞"><a href="#圣何塞" class="headerlink" title="圣何塞"></a>圣何塞</h4><p>2018年开区，永久免费的AMD是7551</p><h4 id="克雷塔罗"><a href="#克雷塔罗" class="headerlink" title="克雷塔罗"></a>克雷塔罗</h4><p>2022年7月17日开区，暂无永久免费的AMD&#x2F;ARM机器</p><h2 id="South-America"><a href="#South-America" class="headerlink" title="South America"></a>South America</h2><h4 id="圣保罗"><a href="#圣保罗" class="headerlink" title="圣保罗"></a>圣保罗</h4><p>2019年8月23日开区，永久免费的AMD是7551</p><h4 id="维涅杜"><a href="#维涅杜" class="headerlink" title="维涅杜"></a>维涅杜</h4><p>2021年5月28日开区，永久免费的AMD有7551</p><h4 id="圣地亚哥"><a href="#圣地亚哥" class="headerlink" title="圣地亚哥"></a>圣地亚哥</h4><p>2020年11月30日开区，永久免费AMD有7551&#x2F;7742&#x2F;7J13</p><h2 id="Middle-East-Afica"><a href="#Middle-East-Afica" class="headerlink" title="Middle East-Afica"></a>Middle East-Afica</h2><h4 id="约翰内斯堡"><a href="#约翰内斯堡" class="headerlink" title="约翰内斯堡"></a>约翰内斯堡</h4><p>2022年1月8日开区，永久免费的AMD是7J13</p><h4 id="吉达"><a href="#吉达" class="headerlink" title="吉达"></a>吉达</h4><p>2020年2月1日开区，永久免费的AMD是7551</p><h4 id="阿布扎比"><a href="#阿布扎比" class="headerlink" title="阿布扎比"></a>阿布扎比</h4><p>2021年11月19日开区，永久免费的AMD是7742</p><h4 id="迪拜"><a href="#迪拜" class="headerlink" title="迪拜"></a>迪拜</h4><p>2020年9月30日开区，永久免费的AMD是7551</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 服务器 </tag>
            
            <tag> oracle </tag>
            
            <tag> 甲骨文 </tag>
            
            <tag> amd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS/服务器常用脚本合集</title>
      <link href="/posts/cc0ad38f.html"/>
      <url>/posts/cc0ad38f.html</url>
      
        <content type="html"><![CDATA[<p>本帖所有脚本均来自互联网，本站仅对这些脚本进行收集，不对其可用性负责，也不对其安全性等任何方面负责。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>查看CPU信息</li><li>查看当前内核信息</li><li>关键字查找进程</li><li>内核更改 [开启BBR、更换BBRplus等]</li><li>Linux修改主机名</li><li>一键开启&#x2F;关闭Swap</li><li>缝合怪测评</li><li>IP质量测试</li><li>Bench – 系统信息+I&#x2F;O+测速</li><li>SuperBench – 系统信息+I&#x2F;O+测速</li><li>HyperSpeed 一键测速</li><li>Besttrace 直接显示回程线路</li><li>Backtrace 三网回程路由测试</li><li>BestTrace 回程测试</li><li>回程测试 [Nanqinlang大佬作品]</li><li>UnixBench.sh [秋水逸冰大佬作品]</li><li>LemonBench.sh</li><li>Yabs.sh [Masonr大佬作品]</li><li>流媒体解锁测试 [Lmc999大佬作品]</li><li>流媒体解锁测试 [LovelyHaochi大佬作品]</li><li>推荐杜甫使用-本脚本支持查看I&#x2F;O bench以及system info</li><li>测试25端口是否开放</li></ul><h2 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044175.jpeg" alt="img"></p><h2 id="查看当前内核信息"><a href="#查看当前内核信息" class="headerlink" title="查看当前内核信息"></a>查看当前内核信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181049853.jpeg" alt="img"></p><h2 id="关键字查找进程"><a href="#关键字查找进程" class="headerlink" title="关键字查找进程"></a>关键字查找进程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep &lt;进程关键字&gt;</span><br></pre></td></tr></table></figure><h2 id="内核更改-开启BBR、更换BBRplus等"><a href="#内核更改-开启BBR、更换BBRplus等" class="headerlink" title="内核更改 [开启BBR、更换BBRplus等]"></a>内核更改 [开启BBR、更换BBRplus等]</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Centos</span><br><span class="line">yum install ca-certificates wget -y &amp;&amp; update-ca-trust force-enable </span><br><span class="line">Debian/Ubuntu： </span><br><span class="line">apt-get install ca-certificates wget -y &amp;&amp; update-ca-certificates </span><br><span class="line"></span><br><span class="line">不卸载内核版本： </span><br><span class="line">wget -O tcpx.sh &quot;https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh </span><br><span class="line"></span><br><span class="line">卸载内核版本： </span><br><span class="line">wget -O tcp.sh &quot;https://github.com/ylx2016/Linux-NetSpeed/raw/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181049020.jpeg" alt="img"></p><h2 id="Linux修改主机名"><a href="#Linux修改主机名" class="headerlink" title="Linux修改主机名"></a>Linux修改主机名</h2><p>首先执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname &lt;newhostname&gt;</span><br></pre></td></tr></table></figure><p>然后执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p>在第二行增加一个 <code>127.0.0.1 &lt;newhostname&gt;</code>，同时将文件中的原主机名修改为刚设置的新主机名</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044864.jpeg" alt="img"></p><h2 id="一键开启-x2F-关闭Swap"><a href="#一键开启-x2F-关闭Swap" class="headerlink" title="一键开启&#x2F;关闭Swap"></a>一键开启&#x2F;关闭Swap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.moerats.com/usr/shell/swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure><h2 id="缝合怪测评"><a href="#缝合怪测评" class="headerlink" title="缝合怪测评"></a>缝合怪测评</h2><ul><li>自由组合测试方向和单项测试以及合集收录第三方脚本–原创</li><li>基础系统信息–感谢teddysun和superbench和yabs开源</li><li>CPU测试–感谢lemonbench开源</li><li>内存测试–感谢lemonbench开源</li><li>磁盘IO读写测试–感谢lemonbench开源</li><li>硬盘IO读写测试–感谢yabs开源</li><li>御三家流媒体解锁–感谢sjlleo的二进制文件</li><li>常用流媒体解锁–感谢RegionRestrictionCheck开源</li><li>Tiktok解锁–感谢lmc999的开源</li><li>三网回程以及路由延迟–感谢zhanghanyun&#x2F;backtrace开源</li><li>回程路由以及带宽类型检测(商宽&#x2F;家宽&#x2F;数据中心)–由fscarmen的PR以及本人的技术思路提供</li><li>端口检测(检测是否被墙)–由fscarmen的PR以及作者的技术思路提供 – 待修复</li><li>IP质量检测(检测IP白不白)(含IPV4和IPV6)–独创，感谢互联网提供的查询资源</li><li>speedtest测速–由teddysun和superspeed的开源以及整理</li><li>全国网络延迟测试–感谢IPASN开源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget -qO- --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/ecs.sh) </span><br><span class="line">或 </span><br><span class="line">bash &lt;(wget -qO- --no-check-certificate https://github.com/spiritLHLS/ecs/raw/main/ecs.sh)</span><br></pre></td></tr></table></figure><h2 id="IP质量测试"><a href="#IP质量测试" class="headerlink" title="IP质量测试"></a>IP质量测试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget -qO- --no-check-certificate https://gitlab.com/spiritysdx/za/-/raw/main/qzcheck.sh) </span><br><span class="line">或 </span><br><span class="line">bash &lt;(wget -qO- --no-check-certificate https://github.com/spiritLHLS/ecs/raw/main/qzcheck.sh)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044180.jpeg" alt="img"></p><h2 id="Bench-–-系统信息-I-x2F-O-测速"><a href="#Bench-–-系统信息-I-x2F-O-测速" class="headerlink" title="Bench – 系统信息+I&#x2F;O+测速"></a>Bench – 系统信息+I&#x2F;O+测速</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181048335.jpeg" alt="img"></p><h2 id="SuperBench-–-系统信息-I-x2F-O-测速"><a href="#SuperBench-–-系统信息-I-x2F-O-测速" class="headerlink" title="SuperBench – 系统信息+I&#x2F;O+测速"></a>SuperBench – 系统信息+I&#x2F;O+测速</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- git.io/superbench.sh | bash </span><br><span class="line">或 </span><br><span class="line">wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044569.jpeg" alt="img"></p><h2 id="HyperSpeed-一键测速"><a href="#HyperSpeed-一键测速" class="headerlink" title="HyperSpeed 一键测速"></a>HyperSpeed 一键测速</h2><ul><li>支持单线程、8线程测速，显示延迟与抖动</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Lso- https://bench.im/hyperspeed) </span><br><span class="line">或 </span><br><span class="line">bash &lt;(wget -qO- https://bench.im/hyperspeed)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044643.jpeg" alt="img"></p><h2 id="Besttrace-直接显示回程线路"><a href="#Besttrace-直接显示回程线路" class="headerlink" title="Besttrace 直接显示回程线路"></a>Besttrace 直接显示回程线路</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- git.io/besttrace | bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044850.jpeg" alt="img"></p><p><strong>（</strong> * *<strong>部分截图* ）</strong></p><h2 id="Backtrace-三网回程路由测试"><a href="#Backtrace-三网回程路由测试" class="headerlink" title="Backtrace 三网回程路由测试"></a>Backtrace 三网回程路由测试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/zhanghanyun/backtrace/main/install.sh -sSf | sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044948.jpeg" alt="img"></p><h2 id="BestTrace-回程测试"><a href="#BestTrace-回程测试" class="headerlink" title="BestTrace 回程测试"></a>BestTrace 回程测试</h2><ul><li>ipip.net 提供的手动输入IP测试回程线路工具</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/besttrace </span><br><span class="line">cd /root/besttrace </span><br><span class="line">wget https://cdn.ipip.net/17mon/besttrace4linux.zip </span><br><span class="line">unzip besttrace4linux.zip </span><br><span class="line"></span><br><span class="line">解压之后会看到几个二进制文件,根据自己的系统选择对应文件。常用的： </span><br><span class="line"></span><br><span class="line">Linux X64系统： </span><br><span class="line">chmod +x besttrace </span><br><span class="line">./besttrace xxx.xxx.xxx.xxx   # 此处输入需测试IP </span><br><span class="line"></span><br><span class="line">Linux X32位系统： </span><br><span class="line">chmod +x besttrace32 </span><br><span class="line">./besttrace32 xxx.xxx.xxx.xxx   # 此处输入需测试IP </span><br><span class="line"></span><br><span class="line">ARM机型： </span><br><span class="line">chmod +x besttracearm </span><br><span class="line">./besttracearm xxx.xxx.xxx.xxx   # 此处输入需测试IP</span><br></pre></td></tr></table></figure><h2 id="回程测试-Nanqinlang大佬作品"><a href="#回程测试-Nanqinlang大佬作品" class="headerlink" title="回程测试 [Nanqinlang大佬作品]"></a>回程测试 [Nanqinlang大佬作品]</h2><ul><li>支持选择节点测试，四网快速测试，手动输入IP测试三种模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/nanqinlang-script/testrace/master/testrace.sh &amp;&amp; bash testrace.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044653.jpeg" alt="img"></p><h2 id="UnixBench-sh-秋水逸冰大佬作品"><a href="#UnixBench-sh-秋水逸冰大佬作品" class="headerlink" title="UnixBench.sh [秋水逸冰大佬作品]"></a>UnixBench.sh [秋水逸冰大佬作品]</h2><ul><li>UnixBench是一个类unix系（Unix，BSD，Linux）统下的性能测试工具，一个开源工具，被广泛用与测试Linux系统主机的性能。Unixbench的主要测试项目有：系统调用、读写、进程、图形化测试、2D、3D、管道、运算、C库等系统基准性能提供测试数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh &amp;&amp; chmod +x unixbench.sh &amp;&amp; ./unixbench.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044518.jpeg" alt="img"></p><h2 id="LemonBench-sh"><a href="#LemonBench-sh" class="headerlink" title="LemonBench.sh"></a>LemonBench.sh</h2><ul><li>LemonBench工具(别名LBench、柠檬Bench)，是一款针对Linux服务器设计的服务器性能测试工具。通过综合测试，可以快速评估服务器的综合性能，为使用者提供服务器硬件配置信息。目前涵盖的测试有：服务器基础信息 (CPU信息&#x2F;内存信息&#x2F;Swap信息&#x2F;磁盘空间信息&#x2F;网络信息等)，流媒体解锁测试 (目前支持HBO Now&#x2F;动画疯&#x2F;B站港澳台&#x2F;B站台湾限定)，系统性能测试 (CPU&#x2F;内存&#x2F;磁盘)，Speedtest网速测试 (本地到最近源及国内各地域不同线路的网速)，路由追踪测试 (追踪到国内和海外不同线路的路由信息)。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">快速测试：</span><br><span class="line">curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s fast </span><br><span class="line"></span><br><span class="line">完整测试： </span><br><span class="line">curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s full</span><br></pre></td></tr></table></figure><h2 id="Yabs-sh-Masonr大佬作品"><a href="#Yabs-sh-Masonr大佬作品" class="headerlink" title="Yabs.sh [Masonr大佬作品]"></a>Yabs.sh [Masonr大佬作品]</h2><ul><li>又一个 Linux VPS 一键测评脚本，可以一键测试 VPS 硬盘的读写速度、网络带宽也就是下载速度、CPU 跑分（包括 Geekbench 4 和 Geekbench 5），以及各种性能测试等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- yabs.sh | bash </span><br><span class="line">或 </span><br><span class="line">curl -sL yabs.sh | bash</span><br></pre></td></tr></table></figure><h2 id="流媒体解锁测试-Lmc999大佬作品"><a href="#流媒体解锁测试-Lmc999大佬作品" class="headerlink" title="流媒体解锁测试 [Lmc999大佬作品]"></a>流媒体解锁测试 [Lmc999大佬作品]</h2><ul><li>本脚本基于CoiaPrant&#x2F;MediaUnlock_Test代码进行修改，支持OS&#x2F;Platform：CentOS 6+, Ubuntu 14.04+, Debian 8+, MacOS, Android with Termux。</li><li>Github项目地址：<a href="https://github.com/lmc999/RegionRestrictionCheck">https://github.com/lmc999/RegionRestrictionCheck</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s check.unlock.media) </span><br><span class="line"></span><br><span class="line">尾部添加参数的释义： </span><br><span class="line">-M 4      只检测IPv4结果 </span><br><span class="line">-M 6      只检测IPv6结果 </span><br><span class="line">-I eth0    指定检测的网卡名称（例：eth0） </span><br><span class="line">-E        选择脚本语言为英文</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181048419.jpeg" alt="img"></p><h2 id="流媒体解锁测试-LovelyHaochi大佬作品"><a href="#流媒体解锁测试-LovelyHaochi大佬作品" class="headerlink" title="流媒体解锁测试 [LovelyHaochi大佬作品]"></a>流媒体解锁测试 [LovelyHaochi大佬作品]</h2><ul><li>支持多个流媒体的ipv4与ipv6解锁情况</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL &quot;https://git.io/JswGm&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181044382.png" alt="img"></p><h2 id="推荐杜甫使用-本脚本支持查看I-x2F-O-bench以及system-info"><a href="#推荐杜甫使用-本脚本支持查看I-x2F-O-bench以及system-info" class="headerlink" title="推荐杜甫使用-本脚本支持查看I&#x2F;O bench以及system info"></a>推荐杜甫使用-本脚本支持查看I&#x2F;O bench以及system info</h2><ul><li>支持查看硬件信息，硬盘通电时间，io等脚本，适合独立服务器使用，vps也能用。</li><li>Github项目地址：<a href="https://github.com/Aniverse/A">https://github.com/Aniverse/A</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q https://github.com/Aniverse/A/raw/i/a &amp;&amp; bash a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305181047608.jpeg" alt="img"></p><h2 id="测试25端口是否开放"><a href="#测试25端口是否开放" class="headerlink" title="测试25端口是否开放"></a>测试25端口是否开放</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet smtp.aol.com 25</span><br></pre></td></tr></table></figure><p>如果看到类似下面的回显，则说明端口是开放的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Trying 74.6.141.50…</span><br><span class="line">Connected to smtp.aol.g03.yahoodns.net.</span><br><span class="line">Escape character is ‘^]’.</span><br><span class="line">220 smtp.mail.yahoo.com ESMTP ready</span><br></pre></td></tr></table></figure><p>如果显示 <code>Connection timed out</code> ，说明25端口不开放。需要注意的是：部分服务商或是系统，需要在控制后台开放25端口，或需要开放系统防火墙端口。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 测速 </tag>
            
            <tag> 合集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将OpenVZ或LXC虚拟化架构的VPS系统重装至Alpine</title>
      <link href="/posts/ab77ae52.html"/>
      <url>/posts/ab77ae52.html</url>
      
        <content type="html"><![CDATA[<p>在我们使用OpenVZ或LXC虚拟化架构的VPS时，有时候我们需要重装系统。但是由于其架构的特殊性质，无法使用常规的DD脚本重装系统。在这篇文章中，我来和大家一起来在OpenVZ或LXC虚拟化架构的VPS系统重装至Alpine</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>OpenVZ或LXC虚拟化架构的VPS</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>请将原系统安装成Debian，并关闭WGCF或WARP-GO的WARP，以提高成功率</p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li><p>SSH进入VPS，输入以下命令，在弹出的提示输入“Y”即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/Misaka-blog/convert-ovzlxc-to-alpine/main/alpine.sh &amp;&amp; bash alpine.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305161444230.png" alt="img"></p></li><li><p>等待脚本执行完成，如无意外的话看到如下图这三条消息之后自动重启VPS即可代表成功</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305161449893.png" alt="img"></p></li><li><p>使用原root账号及密码，登录VPS，如无意外的话登录出现Alpine Linux字样即为成功。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305161444741.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/05/16/convert-ovzlxc-to-alpine/">https://blog.misaka.rest/2023/05/16/convert-ovzlxc-to-alpine/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 教程 </tag>
            
            <tag> openvz </tag>
            
            <tag> lxc </tag>
            
            <tag> alpine </tag>
            
            <tag> 系统 </tag>
            
            <tag> 重装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AZURE-CLI 开机教程 AZURE最安全稳定的开机方式</title>
      <link href="/posts/bb82f602.html"/>
      <url>/posts/bb82f602.html</url>
      
        <content type="html"><![CDATA[<p>一、 首先，我们去azure官方下载一个az-cli，各个操作系统的都有，官方文档讲得已经很详细了，这里就不做赘述。 azure cli <a href="https://learn.microsoft.com/zh-tw/cli/azure/install-azure-cli-linux?pivots=apt">官方安装网址</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131029688.png" alt="img"></p><p>这里以安装-linux为例，vps机器是ubuntu<br>找到ubuntu的安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash</span><br></pre></td></tr></table></figure><p>登录机器进入root模式，输入安装命令，完成安装。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131029056.png" alt="img"></p><p>二 ，登录AZ账户<br>机器VPS输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">az account clear # 清除以前账户</span><br><span class="line">az login --use-device-code</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131037722.png" alt="img"></p><p>输入命令后机器给出了一个网址和代码，网址不变，代码每次不同</p><p>谷歌无痕浏览器打开网址 <a href="https://microsoft.com/devicelogin">https://microsoft.com/devicelogin</a></p><p>输入代码 FDVKBEGEE，再按提示输入AZ账号和密码</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131029839.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131029595.png" alt="img"></p><p>出现上图这样表明AZ账户登录成功了，可以关掉网页了，<br>这时的机器VPS也会变成下图这样，表明机器接管了AZ账户</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131038731.png" alt="img"></p><p>三 ，创建虚拟机机器vps</p><p>1，接下来我们先创建资源组</p><p>输入命令 az group create -n 资源组名 -l 地区</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az group create -n mghk -l eastasia #香港</span><br></pre></td></tr></table></figure><p>注意此处的地区请填写az的代码 如香港是eastasia等，多个机器可以共用同一个资源组</p><p>AZ常用地区代码 (查询命令 az account list-locations -o table）<br>koreacentral 韩国<br>eastasia 香港<br>southeastasia 新加坡<br>japaneast 日本<br>eastus 美国西部</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131029634.png" alt="img"></p><p>2， 创建机器：输入命令 （自行替换中文部分）</p><p>az vm create -g 资源组名（名字要对应上一步）-n 机器名 –image 系统 –admin-username 用户名(SSH登录用户名) –admin-password 密码(SSH登录密码，需要12位以上 大小写字母和数字) –size Standard_B1s(机器规格型号） –os-disk-size-gb 64(内存大小) -public-ip-address-dns-name 自定义dns标签名称(每次更换名称，不能重复)</p><p>注意：在同一个资源组名下创建多个机器时，机器名称不能相同</p><p>示例1–CentOS:7.5系统，7.5可换成其他版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm create -g mghk -n myvmzhu --image OpenLogic:CentOS:7.5:latest --admin-username azureuser --admin-password Azure1234567 --size Standard_F2s --os-disk-size-gb 64 --public-ip-address-dns-name zhutou1021rr</span><br></pre></td></tr></table></figure><p>示例2–默认ubuntu18.04,尝试换20.04或更高级没有成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm create -g mghk-n myvmzhu002 --image ubuntults --admin-username azureuser --admin-password Azure1234567 --size Standard_B1s --os-disk-size-gb 64 --public-ip-address-dns-name zhutou1021hao</span><br></pre></td></tr></table></figure><p>示例3–Debian:debian-10:10:latest，可更换数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm create -g mghk -n myvmzhu003 --image Debian:debian-10:10:latest --admin-username azureuser --admin-password Azure1234567 --size Standard_B1s --os-disk-size-gb 64 --public-ip-address-dns-name zhutou1022gg</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131029031.png" alt="img"></p><p>四 ，登录SSH<br>创建机器成功后看上图，机器显示的”publicIpAddress”就是公网IP，填入主机那里<br>用户名和密码（根据前面自己创建机器时填写的数据）<br>用户名 azureuser<br>密码 Azure1234567<br>使用上面三个数据就可以登录SSH了</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131039625.png" alt="img"></p><p>五，最后一步开放AZ端口</p><p>开放端口命令如下：az vm open-port -n 机器名 -g 资源组名 –port 端口或端口范围 如0-65535全开<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm open-port -n myvmzhu -g mghk --port 0-65535</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305131029357.png" alt="img"></p><p>更换ip命令如下：az vm deallocate -n 机器名 -g 资源组名</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm deallocate -n myvmzhu -g mghk</span><br></pre></td></tr></table></figure><p>等待1分钟过后输入下一个命令</p><p>az vm start -n 机器名 -g 资源组名</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm start -n myvmzhu -g mghk</span><br></pre></td></tr></table></figure><p>接下来我们输入查看更换后的ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vm list-ip-addresses -o table</span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://help.azfa.me/2022/12/01/az-cli/">https://help.azfa.me/2022/12/01/az-cli/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 教程 </tag>
            
            <tag> azure </tag>
            
            <tag> cli </tag>
            
            <tag> 开机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hostmonit网站，在线优选CloudFlare IP</title>
      <link href="/posts/f1a88224.html"/>
      <url>/posts/f1a88224.html</url>
      
        <content type="html"><![CDATA[<p>使用Hostmonit在线优选CloudFlare IP</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>能上网的浏览器</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>打开这个优选网页：<a href="https://stock.hostmonit.com/CloudFlareYes">https://stock.hostmonit.com/CloudFlareYes</a></li><li>可以在这里，选择适合自己运营商的优选IP</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305120943743.png" alt="img"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>由于在线测速的服务器和本地网络环境不一定相同，因此在线优选结果仅供参考</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> cf </tag>
            
            <tag> cloudflare </tag>
            
            <tag> 优选 </tag>
            
            <tag> ip </tag>
            
            <tag> hostmonit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零撸openai120刀教程 带土耳其入金方法.md</title>
      <link href="/posts/61903346.html"/>
      <url>/posts/61903346.html</url>
      
        <content type="html"><![CDATA[<p><strong>原理</strong>：土耳其钱包Oldubli注册后自动开通一张每月1250里拉限额的10年有效期万事达（master）虚拟卡，无需任何KYC。OpenAI绑定信用卡并扣除5美刀预授权额度后将提高账户消费额度为120美刀&#x2F;月，所以并不是真正的赠送120美刀余额，只是将账户升级为即用即付（Pay As You Go）且限制消费为120美刀的账户。</p><p>至于Oldubli如何入金，可以使用wise 或者万能淘宝<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305082213307.jpeg" alt="img"><br><strong>重点</strong>：OpenAI扣除的5美刀仅为预授权额度，得益于土耳其的落后系统以及虚拟信用卡的特性，在为此万事达（master）虚拟卡充值5美刀（考虑到汇损我一般入金115土耳其里拉按照2023.04.22汇率 115里拉为5.9美元)后，短时间内扣除5美刀预授权的操作不会秒级别的应用到此账户。 说人话：冲5刀进去 可以30min-1h内无限扣除5刀预授权，意思为你只要手速快，用这张只充值了115里拉的卡能绑起码2-4个OpenAI账户…..等30min-1h内土佬的系统把此额度应用了才会失效….so….</p><p><strong>重点中的重点</strong>：30min-1h后5刀额度被真正应用后就无法骚操作了，但是就算到这一步，你的5美刀（115里拉）依然没有消失，依然在你的万事达卡中，依然可以真实的花出去！！！所以撸完了OpenAI120美金后是用其继续开土耳其netflix还是充值这5美金到linode账户还是你继续撸aws等等….就都随你了</p><p><strong>注意事项</strong>：Oldubli在google 商店和apple商店（外区）均可下载，但需美国IP或土耳其IP访问，否则报错！<br>Oldubli目前仅乌克兰手机号、土耳其手机号、阿塞拜疆手机号可以正常收验证码注册。这里提供一个应用：SafeUM 同样可以在两个商店下载到，注册后获得一个拉脱维亚或阿塞拜疆虚拟号，这个号码完全属于你，看广告可以继续续期！<br>SO:获得到的阿塞拜疆手机号还能注册验证OpenAI账户，这下真连账号成本都没有了</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> openai </tag>
            
            <tag> chatGPT </tag>
            
            <tag> 零撸 </tag>
            
            <tag> 入金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Chrome使用New Bing聊天</title>
      <link href="/posts/bfd72768.html"/>
      <url>/posts/bfd72768.html</url>
      
        <content type="html"><![CDATA[<p>在之前New Bing公测的时候，博主就对其感兴趣了。不过由于微软的某些原因，我迟迟没有等到内测的名额。好在最近几天，New Bing向所有用户开放了，我才得以使用其进行聊天。而且流畅度比ChatGPT好多了。但是有个缺点就是只能在Edge浏览器上使用。在这期文章中，我来和大家一起突破微软的限制，在Chrome浏览器使用New Bing</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Chrome 浏览器</li><li>微软账户（可选）</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>1.打开这个插件的下载链接：<br><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-and-m/bhchdcejhohfmigjafbampogmaanbfkg">https://chrome.google.com/webstore/detail/user-agent-switcher-and-m/bhchdcejhohfmigjafbampogmaanbfkg</a><br>然后点击“添加至Chrome”按钮，进行插件安装</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639869.png" alt="img"></p><p>2.按照下图指示，设置UA</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639654.png" alt="img"></p><p>3.点击“Test UA”按钮，测试UA。当看到和插件设置的UA一样的时候即为成功</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639049.png" alt="img"></p><p>4.随意问一个问题，可以看到是和在Edge一样是正常使用的</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202305051639827.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/05/05/newbing-chrome/">https://blog.misaka.rest/2023/05/05/newbing-chrome/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> edge </tag>
            
            <tag> chrome </tag>
            
            <tag> chatgpt </tag>
            
            <tag> bing </tag>
            
            <tag> new </tag>
            
            <tag> 必应 </tag>
            
            <tag> 聊天 </tag>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>借助Cloudflare Argo Tunnel隧道，在PaaS容器云平台部署哪吒探针</title>
      <link href="/posts/61d5747e.html"/>
      <url>/posts/61d5747e.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>GitHub 账户</li><li>CloudFlare 账户，并准备一个域名</li><li>PaaS 容器云账户（以下使用Koyeb为演示平台）</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>1.打开F佬的CF Argo Tunnel生成网：<a href="https://fscarmen.cloudflare.now.cc/">https://fscarmen.cloudflare.now.cc</a> ，按照下图步骤获取隧道信息</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337368.png" alt="img"></p><p>2.进入CloudFlare控制台，在相应的域名 DNS 记录里加上客户端上报数据(tcp)和 ssh（可选）的域名，打开小云朵以启用 CDN</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271341472.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337405.png" alt="img"></p><p>3.转到 网络 选项，将 gRPC 开关打开</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271341157.png" alt="img"></p><p>4.设置新的OAuth授权应用，打开：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> ，设置应用程序。面板域名加上 <code>https://</code> 开头，回调地址再加上 <code>/oauth2/callback</code> 结尾</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337360.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337006.png" alt="img"></p><p>5.获取 GitHub 的 PAT (Personal Access Token): <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337808.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337879.png" alt="img"></p><p>6.创建 GitHub 用于备份的私库: <a href="https://github.com/new">https://github.com/new</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337015.png" alt="img"></p><p>7.打开Koyeb，创建一个新的APP。类型选择Docker</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271342115.png" alt="img"></p><p>8.输入镜像名称：<code>fscarmen/argo-nezha:latest</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271342422.png" alt="img"></p><p>9.按照下图设置，下表为参考变量</p><table><thead><tr><th>变量名</th><th>是否必须</th><th>备注</th></tr></thead><tbody><tr><td>GH_USER</td><td>是</td><td>github 的用户名，用于面板管理授权</td></tr><tr><td>GH_CLIENTID</td><td>是</td><td>在 github 上申请</td></tr><tr><td>GH_CLIENTSECRET</td><td>是</td><td>在 github 上申请</td></tr><tr><td>GH_REPO</td><td>否</td><td>在 github 上备份哪吒服务端数据库文件的库</td></tr><tr><td>GH_EMAIL</td><td>否</td><td>github 的邮箱，用于备份的 git 推送到远程库</td></tr><tr><td>GH_PAT</td><td>否</td><td>github 的 PAT</td></tr><tr><td>ARGO_JSON</td><td>是</td><td>从 <a href="https://fscarmen.cloudflare.now.cc/">https://fscarmen.cloudflare.now.cc</a> 获取的 Argo Json</td></tr><tr><td>DATA_DOMAIN</td><td>是</td><td>客户端与服务端的通信 argo 域名</td></tr><tr><td>WEB_DOMAIN</td><td>是</td><td>面板 argo 域名</td></tr><tr><td>SSH_DOMAIN</td><td>否</td><td>ssh 用的 argo 域名</td></tr><tr><td>SSH_PASSWORD</td><td>否</td><td>ssh 的密码，只有在设置 SSH_JSON 后才生效，默认值 password</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271342525.png" alt="img"></p><p>10.等待1-2分钟，待出现Healthy即为成功部署。这时可以使用Argo的域名或者是PaaS平台的域名访问探针面板</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271337598.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271423291.png" alt="img"></p><h2 id="VPS-部署实例"><a href="#VPS-部署实例" class="headerlink" title="VPS 部署实例"></a>VPS 部署实例</h2><ul><li>注意: ARGO_JSON&#x3D; 后面需要有单引号，不能去掉</li><li>如果 VPS 是 IPv6 only 的，请先安装 WARP IPv4 或者双栈: <a href="https://github.com/fscarmen/warp">https://github.com/fscarmen/warp</a></li><li>备份目录为当前路径的 dashboard 文件夹</li></ul><h3 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">           --name nezha_dashboard \</span><br><span class="line">           --restart always \</span><br><span class="line">           -e GH_USER=&lt;填 github 用户名&gt; \</span><br><span class="line">           -e GH_EMAIL=&lt;填 github 邮箱&gt; \</span><br><span class="line">           -e GH_PAT=&lt;填获取的&gt; \</span><br><span class="line">           -e GH_REPO=&lt;填自定义的&gt; \</span><br><span class="line">           -e GH_CLIENTID=&lt;填获取的&gt;  \</span><br><span class="line">           -e GH_CLIENTSECRET=&lt;填获取的&gt; \</span><br><span class="line">           -e ARGO_JSON=&#x27;&lt;填获取的&gt;&#x27; \</span><br><span class="line">           -e WEB_DOMAIN=&lt;填自定义的&gt; \</span><br><span class="line">           -e DATA_DOMAIN=&lt;填自定义的&gt; \</span><br><span class="line">           -e SSH_DOMAIN=&lt;填自定义的&gt; \</span><br><span class="line">           -e SSH_PASSWORD=&lt;填自定义的&gt; \</span><br><span class="line">           fscarmen/argo-nezha</span><br></pre></td></tr></table></figure><h3 id="docker-compose-部署"><a href="#docker-compose-部署" class="headerlink" title="docker-compose 部署"></a>docker-compose 部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line">services:</span><br><span class="line">    argo-nezha:</span><br><span class="line">        image: fscarmen/argo-nezha</span><br><span class="line">        container_name: nezha_dashboard</span><br><span class="line">        restart: always</span><br><span class="line">        environment:</span><br><span class="line">            - GH_USER=&lt;填 github 用户名&gt;</span><br><span class="line">            - GH_EMAIL=&lt;&lt;填 github 邮箱&gt;</span><br><span class="line">            - GH_PAT=&lt;填获取的&gt;</span><br><span class="line">            - GH_REPO=&lt;填自定义的&gt;</span><br><span class="line">            - GH_CLIENTID=&lt;填获取的&gt;</span><br><span class="line">            - GH_CLIENTSECRET=&lt;填获取的&gt;</span><br><span class="line">            - ARGO_JSON=&#x27;&lt;填获取的&gt;&#x27;</span><br><span class="line">            - WEB_DOMAIN=&lt;填自定义的&gt;</span><br><span class="line">            - DATA_DOMAIN=&lt;填自定义的&gt;</span><br><span class="line">            - SSH_DOMAIN=&lt;填自定义的&gt;</span><br><span class="line">            - SSH_PASSWORD=&lt;填自定义的&gt;</span><br></pre></td></tr></table></figure><h2 id="客户端接入"><a href="#客户端接入" class="headerlink" title="客户端接入"></a>客户端接入</h2><p>通过gRPC传输，无需额外配置。使用面板给到的安装方式，举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh &amp;&amp; sudo ./nezha.sh install_agent data.seales.nom.za 443 eAxO9IF519fKFODlW0 --tls</span><br></pre></td></tr></table></figure><h2 id="SSH-接入"><a href="#SSH-接入" class="headerlink" title="SSH 接入"></a>SSH 接入</h2><ul><li>以 macOS + WindTerm 为例，其他根据使用的 SSH 工具，结合官方官方说明文档: <a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/use_cases/ssh/#2-connect-as-a-user">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/use_cases/ssh/#2-connect-as-a-user</a></li><li>官方 cloudflared 下载: <a href="https://github.com/cloudflare/cloudflared/releases">https://github.com/cloudflare/cloudflared/releases</a></li><li>以下输入命令举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;file path&gt;/cloudflared access ssh --hostname ssh.seales.nom.za</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271425791.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271423316.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271424294.png" alt="img"></p><h2 id="自动还原备份"><a href="#自动还原备份" class="headerlink" title="自动还原备份"></a>自动还原备份</h2><ul><li>把需要还原的文件名改到 github 备份库里的 <code>README.md</code>，定时服务会每分钟检测更新，并把上次同步的文件名记录在本地 <code>/dbfile</code> 处以与在线的文件内容作比对</li></ul><p>下图为以还原文件名为 <code>dashboard-2023-04-23-13:08:37.tar.gz</code> 作示例</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271423301.png" alt="img"></p><h2 id="手动还原备份"><a href="#手动还原备份" class="headerlink" title="手动还原备份"></a>手动还原备份</h2><ul><li>ssh 进入容器后运行，github 备份库里的 tar.gz 文件名，格式: dashboard-2023-04-22-21:42:10.tar.gz</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /dashboard/restore.sh &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304271424279.png" alt="img"></p><h2 id="完美搬家"><a href="#完美搬家" class="headerlink" title="完美搬家"></a>完美搬家</h2><ul><li>备份原哪吒的 <code>/dashboard</code> 文件夹，压缩备份为 <code>dashboard.tar.gz</code> 文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czvf dashboard.tar.gz /dashboard</span><br></pre></td></tr></table></figure><ul><li>下载文件并放入私库，这个私库名要与新哪吒 <GH_REPO> 完全一致，并把该库的 README.md 的内容编辑为 <code>dashboard.tar.gz</code></li><li>部署本项目新哪吒，完整填入变量即可。部署完成后，自动还原脚本会每分钟作检测，发现有新的内容即会自动还原，全程约 3 分钟</li></ul><h2 id="主体目录文件及说明"><a href="#主体目录文件及说明" class="headerlink" title="主体目录文件及说明"></a>主体目录文件及说明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- dashboard</span><br><span class="line">|   |-- app                  # 哪吒面板主程序</span><br><span class="line">|   |-- argo.json            # Argo 隧道 json 文件，记录着使用隧道的信息</span><br><span class="line">|   |-- argo.yml             # Argo 隧道 yml 文件，用于在一同隧道下，根据不同域名来分流 web, gRPC 和 ssh 协议的作用</span><br><span class="line">|   |-- backup.sh            # 备份数据脚本</span><br><span class="line">|   |-- data</span><br><span class="line">|   |   |-- config.yaml      # 哪吒面板的配置，如 Github OAuth2 / gRPC 域名 / 端口 / 是否启用 TLS 等信息</span><br><span class="line">|   |   `-- sqlite.db        # SQLite 数据库文件，记录着面板设置的所有 severs 和 cron 等信息</span><br><span class="line">|   |-- entrypoint.sh        # 主脚本，容器运行后执行</span><br><span class="line">|   |-- nezha-agent          # 哪吒客户端，用于监控本地 localhost</span><br><span class="line">|   |-- nezha.csr            # SSL/TLS 证书签名请求</span><br><span class="line">|   |-- nezha.key            # SSL/TLS 证书的私钥信息</span><br><span class="line">|   |-- nezha.pem            # SSL/TLS 隐私增强邮件</span><br><span class="line">|   `-- restore.sh           # 还原备份脚本</span><br><span class="line">`-- dbfile                   # 记录最新的还原或备份文件名</span><br></pre></td></tr></table></figure><h2 id="鸣谢下列作者的文章和项目"><a href="#鸣谢下列作者的文章和项目" class="headerlink" title="鸣谢下列作者的文章和项目:"></a>鸣谢下列作者的文章和项目:</h2><ul><li>热心的朝阳群众 Robin，讨论哪吒服务端与客户端的关系，从而诞生了此项目</li><li>哪吒官网: <a href="https://nezha.wiki/">https://nezha.wiki/</a> , TG 群: <a href="https://t.me/nezhamonitoring">https://t.me/nezhamonitoring</a></li><li>共穷国际老中医: <a href="http://solitud.es/">http://solitud.es/</a></li><li>Akkia’s Blog: <a href="https://blog.akkia.moe/">https://blog.akkia.moe/</a></li><li>HiFeng’s Blog: <a href="https://www.hicairo.com/">https://www.hicairo.com/</a></li><li>用 Cloudflare Tunnel 进行内网穿透: <a href="https://blog.outv.im/2021/cloudflared-tunnel/">https://blog.outv.im/2021/cloudflared-tunnel/</a></li></ul><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明:"></a>免责声明:</h2><ul><li>本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。</li><li>使用本程序必循遵守部署免责声明。使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。</li></ul><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><blockquote><p><a href="https://github.com/fscarmen2/Argo-Nezha-Service-Container">https://github.com/fscarmen2/Argo-Nezha-Service-Container</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> cf </tag>
            
            <tag> cloudflare </tag>
            
            <tag> argo </tag>
            
            <tag> tunnel </tag>
            
            <tag> paas </tag>
            
            <tag> 容器 </tag>
            
            <tag> 容器云 </tag>
            
            <tag> 哪吒 </tag>
            
            <tag> 探针 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国各个地区Google Voice号段地图</title>
      <link href="/posts/7b32c8fe.html"/>
      <url>/posts/7b32c8fe.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260925649.png" alt="img"></p><p>各州包含号段介绍（号码前三位为所在州号段）</p><table><thead><tr><th><strong>美国州</strong></th><th><strong>包含电话号段（Google Voice 前三位）</strong></th></tr></thead><tbody><tr><td>Alabama (AL) 阿拉巴马州</td><td>205, 251, 256, 334, 938</td></tr><tr><td>Alaska (AK) 阿拉斯加州</td><td>907</td></tr><tr><td>Arizona (AZ) 亚利桑那州</td><td>480, 520, 602, 623, 928</td></tr><tr><td>Arkansas (AR) 阿肯色州</td><td>479, 501, 870</td></tr><tr><td>California (CA) 加利福尼亚州</td><td>209, 213, 279, 310, 323, 341, 408, 415, 424, 442, 510, 530, 559, 562, 619, 626, 628, 650, 657, 661, 669, 707, 714, 747, 760, 805, 818, 820, 831, 858, 909, 916, 925, 949, 951</td></tr><tr><td>Colorado (CO) 科罗拉多州</td><td>303, 719, 720, 970</td></tr><tr><td>Connecticut (CT) 康涅狄格州</td><td>203, 475, 860, 959</td></tr><tr><td>Delaware (DE) 特拉华州</td><td>302</td></tr><tr><td>Florida (FL) 佛罗里达州</td><td>239, 305, 321, 352, 386, 407, 561, 727, 754, 772, 786, 813, 850, 863, 904, 941, 954</td></tr><tr><td>Georgia (GA) 乔治亚州</td><td>229, 404, 470, 478, 678, 706, 762, 770, 912</td></tr><tr><td>Hawaii (HI) 夏威夷州</td><td>808</td></tr><tr><td>Idaho (ID) 爱华达州</td><td>208, 986</td></tr><tr><td>Illinois (IL) 伊利诺伊州</td><td>217, 224, 309, 312, 331, 618, 630, 708, 773, 779, 815, 847, 872</td></tr><tr><td>Indiana (IN) 印第安那州</td><td>219, 260, 317, 463, 574, 765, 812, 930</td></tr><tr><td>Iowa (IA) 爱荷华州</td><td>319, 515, 563, 641, 712</td></tr><tr><td>Kansas (KS) 堪萨斯州</td><td>316, 620, 785, 913</td></tr><tr><td>Kentucky (KY) 肯塔基州</td><td>270, 364, 502, 606, 859</td></tr><tr><td>Louisiana (LA) 路易斯安那州</td><td>225, 318, 337, 504, 985</td></tr><tr><td>Maine (ME) 缅因州</td><td>207</td></tr><tr><td>Maryland (MD) 马里兰州</td><td>240, 301, 410, 443, 667</td></tr><tr><td>Massachusetts (MA) 马萨诸塞州</td><td>339, 351, 413, 508, 617, 774, 781, 857, 978</td></tr><tr><td>Michigan (MI) 密歇根州</td><td>231, 248, 269, 313, 517, 586, 616, 734, 810, 906, 947, 989</td></tr><tr><td>Minnesota (MN) 明尼苏达州</td><td>218, 320, 507, 612, 651, 763, 952</td></tr><tr><td>Mississippi (MS) 密西西比州</td><td>228, 601, 662, 769</td></tr><tr><td>Missouri (MO) 密苏里州</td><td>314, 417, 573, 636, 660, 816</td></tr><tr><td>Montana (MT) 蒙大拿州</td><td>406</td></tr><tr><td>Nebraska (NE) 内布拉斯加州</td><td>308, 402, 531</td></tr><tr><td>Nevada (NV) 内华达州</td><td>702, 725, 775</td></tr><tr><td>New Hampshire (NH) 新罕布什尔州</td><td>603</td></tr><tr><td>New Jersey (NJ) 新泽西州</td><td>201, 551, 609, 640, 732, 848, 856, 862, 908, 973</td></tr><tr><td>New Mexico (NM) 新墨西哥州</td><td>505, 575</td></tr><tr><td>New York (NY) 纽约州</td><td>212, 315, 332, 347, 516, 518, 585, 607, 631, 646, 680, 716, 718, 838, 845, 914, 917, 929, 934</td></tr><tr><td>North Carolina (NC) 北卡罗来纳州</td><td>252, 336, 704, 743, 828, 910, 919, 980, 984</td></tr><tr><td>North Dakota (ND) 北达科他州</td><td>701</td></tr><tr><td>Ohio (OH) 俄亥俄州</td><td>216, 220, 234, 330, 380, 419, 440, 513, 567, 614, 740, 937</td></tr><tr><td>Oklahoma (OK) 奥克拉荷马州</td><td>405, 539, 580, 918</td></tr><tr><td>Oregon (OR) 俄勒冈州</td><td>458, 503, 541, 971</td></tr><tr><td>Pennsylvania (PA) 宾夕法尼亚州</td><td>215, 223, 267, 272, 412, 445, 484, 570, 610, 717, 724, 814, 878</td></tr><tr><td>Rhode Island (RI) 罗德岛州</td><td>401</td></tr><tr><td>South Carolina (SC) 南卡罗来纳州</td><td>803, 843, 854, 864</td></tr><tr><td>South Dakota (SD) 南达科他州</td><td>605</td></tr><tr><td>Tennessee (TN) 田纳西州</td><td>423, 615, 629, 731, 865, 901, 931</td></tr><tr><td>Texas (TX) 德克萨斯州</td><td>210, 214, 254, 281, 325, 346, 361, 409, 430, 432, 469, 512, 682, 713, 726, 737, 806, 817, 830, 832, 903, 915, 936, 940, 956, 972, 979</td></tr><tr><td>Utah (UT) 犹他州</td><td>385, 435, 801</td></tr><tr><td>Vermont (VT) 佛蒙特州</td><td>802</td></tr><tr><td>Virginia (VA) 弗吉尼亚州</td><td>276, 434, 540, 571, 703, 757, 804</td></tr><tr><td>Washington (WA) 华盛顿州</td><td>206, 253, 360, 425, 509, 564</td></tr><tr><td>Washington (DC) 华盛顿特区</td><td>202</td></tr><tr><td>West Virginia (WV) 西弗吉尼亚州</td><td>304, 681</td></tr><tr><td>Wisconsin (WI) 威斯康辛州</td><td>262, 414, 534, 608, 715, 920</td></tr><tr><td>Wyoming (WY) 怀俄明州</td><td>307</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美国 </tag>
            
            <tag> 地图 </tag>
            
            <tag> 区号 </tag>
            
            <tag> google </tag>
            
            <tag> voice </tag>
            
            <tag> gv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国五大免税州的邮编、电话区号</title>
      <link href="/posts/d7dfe87e.html"/>
      <url>/posts/d7dfe87e.html</url>
      
        <content type="html"><![CDATA[<p><strong>美国5大免税州是哪几个？</strong></p><blockquote><ol><li>阿拉斯加州（Alaska）首府：朱诺（Juneau）邮编：99850 电话区号：907</li><li>特拉华州（Delaware）邮编：19702 电话区号：302</li><li>蒙大拿州（Montana）城市：Marion邮编：26586  电话区号：406</li><li>新罕布什尔州（New Hampshire）城市：Fremont邮编：03044 电话区号：603</li><li>俄勒冈州（Oregon）城市：ANTELOPE 邮编：97001 电话区号：503 、 971</li></ol></blockquote><p>下面我们来盘点一下五大免税州的主要城市的邮编：</p><p><strong>一、阿拉斯加州（Alaska）主要城市的邮编</strong></p><p>1、朱诺（Juneau）</p><blockquote><p>邮编：99801,99802,99803,99811,99850</p></blockquote><p>2、安克雷奇邮编（Anchorage）：</p><blockquote><p>邮编：99501,99502,99503,99504,99507,99508,99509,99510,99511,99512,99513,99514,99515,99516,99517,99518,99519,99520,99521,99522,99523,99524,99525,99526,99527,99528,99529,99530,99531,99532,99533,99534,99535,99536,99537,99538,99539,9954099541,99542,99543,99544,99545,99546,99547,99548,99549,99550,99551,99552,99553,99554,99555,99556,99557,99558,99559,99560,99561,99562,99563,99564,99565,99566,99567,99568,99569,99570,99571,99572,99573,99574,99575,99576,99577,99578,99579,99580,99581,99582,99583,99584,99585,99586,99587,99588,99589,99590,99591,99592,99593,99594,99595,99596,99597,99598,99599,99695</p></blockquote><p>3、费尔班克斯（Fairbanks）</p><blockquote><p>邮编：99701,99706,99707,99708,99709,99710,99711,99712,99775,99790</p></blockquote><p><strong>二、特拉华州Delaware (DE)主要城市邮编</strong></p><p>1、多佛(Dover)</p><blockquote><p>邮编：19901,19903,19904-19906</p></blockquote><p>2、维明顿(Wilmington)</p><blockquote><p>邮编：19801-19810,19850,19880,19884-19887,19889-19899</p></blockquote><p>3、纽瓦克(Newark)</p><blockquote><p>邮编：19702,19711-19718,19725,19726</p></blockquote><p><strong>三、蒙大拿州（Montana）主要城市的邮编</strong></p><p>1、赫勒拿（Heldna）</p><blockquote><p>邮编：59601,59602,59604,59620,59623,59624,59625,59626</p></blockquote><p>2、比林斯（Billings）</p><blockquote><p>邮编：59101,59102,59103,59104,59105,59106,59107,59108,59111,59112,59114,59115,59116,59117</p></blockquote><p>3、密苏拉（Missoula）</p><blockquote><p>邮编：59801,59802,59803,59804,59806,59807,59808,59812</p></blockquote><p><strong>四、新罕不什尔州（New Hampshire）主要城市邮编</strong></p><p>1、曼彻斯特（Manchester）</p><blockquote><p>邮编：03101,03102,03103,03104,03105,03107,03108,03109,03111</p></blockquote><p>2、南雪（Nashua）</p><blockquote><p>邮编：03060,03061,03062,03063,03064</p></blockquote><p>3、朴茨茅斯（Portsmouth）</p><blockquote><p>邮编：03801,03802,03803,03804</p></blockquote><p><strong>五、俄勒冈州Oregon（OR）主要城市邮编</strong></p><p>1、沙连(Salem)</p><blockquote><p>邮编：97301,97302,97303,97304,97305,97306,97308,97309,97310,97311,97312,97313,97314</p></blockquote><p>2、波特兰(Portland)</p><blockquote><p>邮编：97201,97202,97203,97204,97205,97206,97207,97208,97209,97210,97211,97212,97213,97214,97215,97216,97217,97218,97219,97220,97221,97222,97223,97224,97225,97227,97228,97229,97230,97231,97232,97233,97236,97238,97239,97240,97242,97251,97253,97254,97255,97256,97258,97259,97266,97267,97268,97269,97271,97272,97280,97281,97282,97283,97286,97290,97291,97292,97293,97294,97296,97298,97299</p></blockquote><p>3、尤金(Eugene)</p><blockquote><p>邮编：97401,97402,97403,97404,97405,97408,97440</p></blockquote><p>4、科瓦利(Corvallis)</p><blockquote><p>邮编：97330,97331,97333,97339</p></blockquote><p><strong>附上一个免税州地址</strong></p><p>地址：11831 SW Riverwood Road, Portland OR 97219<br>城市：波特兰（Portland）<br>区号：503</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美国 </tag>
            
            <tag> 区号 </tag>
            
            <tag> 免税 </tag>
            
            <tag> 邮编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甲骨文oracle修改邮箱，修改管理员账号</title>
      <link href="/posts/a4530c38.html"/>
      <url>/posts/a4530c38.html</url>
      
        <content type="html"><![CDATA[<p>买的账号要素：1.<strong>甲骨文</strong>登录账号+密码 2.登录的邮箱+邮箱密码（比如<a href="mailto:abc321@gamil.com">abc321@gamil.com</a>）<br><strong>提醒</strong>：1.拿到邮箱和邮箱密码第一时间修改密码。2.登录所用邮箱的前半段即Tenant(abc321)<strong>必须牢记</strong>！完全修改完成后，只有这一段是登录需要使用到的。<br>正式开始<br>1、按卖家给你的信息，登录甲骨文，选择-身份与安全-用户。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260836390.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>2、创建新用户，牢记设置的用户名，添加自己的邮箱（要收取邮件的），重置获取一次性密码，添加新增用户进入admin管理组。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260836530.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835194.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835115.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>3、查看邮箱，点链接。使用新建用户登录,重置密码。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835134.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260836628.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835387.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835273.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>4、<strong>关键</strong>新号登录后，先在<strong>管理组</strong>内先删除老管理员账号，再从用户中删除老管理员账号。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260837863.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260841198.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>以上就完成了甲骨文账号修改替换，以后登录可以用每个分区的专属链接<br>比如：<br>首尔<br><a href="https://console.ap-seoul-1.oraclecloud.com/">https://console.ap-seoul-1.oraclecloud.com</a><br>春川<br><a href="https://console.ap-chuncheon-1.oraclecloud.com/">https://console.ap-chuncheon-1.oraclecloud.com</a><br>凤凰城<br><a href="https://console.us-phoenix-1.oraclecloud.com/">https://console.us-phoenix-1.oraclecloud.com</a><br>圣何塞<br><a href="https://console.us-sanjose-1.oraclecloud.com/">https://console.us-sanjose-1.oraclecloud.com</a><br>东京<br><a href="https://console.ap-tokyo-1.oraclecloud.com/">https://console.ap-tokyo-1.oraclecloud.com</a><br>或者统一登录地址<br><a href="https://cloud.oracle.com/">https://cloud.oracle.com</a><br>输入Tenant（原始邮箱@前半段）<br>然后输入你新建的用户名+密码就可以成功登录。</p><p>有楼层提到了租户里面改邮箱，那是以前的教程有一个叫“服务用户控制台”的选项，现在我的所有账号里都没有这个了，但是甲骨文的IDCS还是可以进入的，附上方法截图。主要用途就是改个邮箱，方便接收吓人的邮件。</p><p>建议不要关注邮件，都是同一套模板。<strong>一切以实际能不能ssh上机器为准！</strong></p><p>1.身份和安全-联盟-点进联盟号-点击链接进入DICS管理页面<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260841191.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835892.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835538.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260835536.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><p>2.三处修改，密码，邮箱，恢复邮箱。这里仅是用于IDCS<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260840614.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"><br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304260840800.png" alt="甲骨文oracle修改邮箱，新增修改管理员账号"></p><blockquote><p>原文链接：<a href="https://qssjx.com/?p=700">https://qssjx.com/?p=700</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 教程 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> cloud </tag>
            
            <tag> oracle </tag>
            
            <tag> 甲骨文 </tag>
            
            <tag> 甲骨文云 </tag>
            
            <tag> 帐号 </tag>
            
            <tag> 邮箱 </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash将默认的Clash Premium内核切换为Clash Meta内核</title>
      <link href="/posts/71157ecf.html"/>
      <url>/posts/71157ecf.html</url>
      
        <content type="html"><![CDATA[<p>在我们使用Clash For Windows（以下均使用CFW指代）时，有时候需要使用Clash Meta内核。对于习惯CFW的用户来说，切换客户端有时是一件忍痛割爱的事情。那在这篇教程中，我来和大家一起来在CFW中将默认的Clash Premium内核切换为Clash Meta内核。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Clash For Windows</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>打开 Clash Meta 的项目下载地址：<a href="https://github.com/MetaCubeX/Clash.Meta/releases">https://github.com/MetaCubeX/Clash.Meta/releases</a> ，下载适合自己电脑的版本</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201026040.png" alt="img"></p><ol><li>解压内核程序，备用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201025418.png" alt="img"></p><ol><li>进入CFW的安装目录中的<code>resources/static/files/win/x64</code>（如为32位系统的程序则为<code>x86</code>），将默认的<code>clash-win64.exe</code>更名备份，我这里就改为<code>clash-win642.exe</code></li><li>将第二步解压的内核程序复制进来，并改为<code>clash-win64.exe</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201025239.png" alt="img"></p><ol><li>打开CFW，当此处出现“Unknown”即为切换成功</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201025030.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/04/19/cfw-change-meta/">https://blog.misaka.rest/2023/04/19/cfw-change-meta/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clash </tag>
            
            <tag> 内核 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudFlare Argo Tunnel教程</title>
      <link href="/posts/32016df9.html"/>
      <url>/posts/32016df9.html</url>
      
        <content type="html"><![CDATA[<p>在我们使用NAT VPS的时候，或者是我们自己使用本地环境的时候，由于我们没有公网IP，只能使用内网穿透的法子。这时候，我们就可以使用CloudFlare Argo Tunnel来穿透我们需要使用公网IP的服务，并且可以自定义域名。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>一枚域名，并DNS解析到CloudFlare</li></ul><h2 id="步骤方法"><a href="#步骤方法" class="headerlink" title="步骤方法"></a>步骤方法</h2><ol><li>打开Argo Tunnel的官网：<a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation</a> ，然后选择自己的Linux版本下载对应的安装包。CentOS系系统选择rpm包下载，Debian系系统选择deb包下载</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201019203.png" alt="img"></p><ol><li>使用<code>dpkg -i cloudflared-linux-amd64.deb</code>（CentOS：<code>rpm -i cloudflared-linux-amd64.rpm</code>）安装cloudflared客户端<br>PS: 本文中官网下载的文件名为cloudflared-linux-amd64.deb，请按照实际文件名安装</li><li>可以使用<code>cloudflared tunnel --url http://127.0.0.1:端口号</code>命令，测试HTTP隧道效果或使用<code>cloudflared tunnel --url tcp://127.0.0.1:端口号</code>命令，测试TCP隧道效果</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201019082.png" alt="img"></p><ol><li>使用<code>cloudflared tunnel login</code>命令，登录你的CloudFlare账号。复制控制台出现的网址登录你的CloudFlare账号</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201019759.png" alt="img"></p><ol><li>选择一个域名，授权给Argo Tunnel使用</li><li>下面是一些常用的命令</li></ol><p>创建隧道：<code>cloudflared tunnel create 隧道名</code><br>删除隧道：<code>cloudflared tunnel delete 隧道名</code><br>列出隧道：<code>cloudflared tunnel list</code><br>配置隧道：<code>cloudflared tunnel route dns 隧道名 [CNAME 记录名称].[接入 CLoudflare 的域名]</code><br>运行隧道：<code>cloudflared tunnel run --url http://127.0.0.1:http端口号 隧道名</code> 或 <code>cloudflared tunnel run --url tcp://127.0.0.1:tcp端口号 隧道名</code></p><ol><li>使用YML配置文件文件如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line">tunnel: [tunnel 的名称或 UUID]</span><br><span class="line">credentials-file: /root/.cloudflared/[tunnel 的 UUID].json</span><br><span class="line"></span><br><span class="line">ingress:</span><br><span class="line">  - hostname: [CNAME 记录名称].[接入 CLoudflare 的域名]</span><br><span class="line">    service: http://localhost:80</span><br><span class="line">  - service: http_status:404</span><br></pre></td></tr></table></figure><blockquote><p>配置文件使用 Ingress 规则，如果想配置 SSH、TCP 等其他协议，可以查看官网：<a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress">https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress</a></p></blockquote><p>然后使用 <code>cloudflared tunnel --config [配置文件路径] run</code> 命令运行隧道</p><p>参考：<a href="https://www.blueskyxn.com/202102/4176.html">https://www.blueskyxn.com/202102/4176.html</a></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/04/19/argo-tunnel/">https://blog.misaka.rest/2023/04/19/argo-tunnel/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 教程 </tag>
            
            <tag> cloudflare </tag>
            
            <tag> argo </tag>
            
            <tag> tunnel </tag>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独角数卡配置支付宝当面付</title>
      <link href="/posts/e76be41c.html"/>
      <url>/posts/e76be41c.html</url>
      
        <content type="html"><![CDATA[<h3 id="支付宝开通个体支付商户"><a href="#支付宝开通个体支付商户" class="headerlink" title="支付宝开通个体支付商户"></a>支付宝开通个体支付商户</h3><p>服务官网地址：<a href="https://b.alipay.com/signing/productDetailV2.htm?productId=I1011000290000001003">https://b.alipay.com/signing/productDetailV2.htm?productId=I1011000290000001003</a></p><p>打开后点击立即开通，扫码登录支付宝账号</p><p>填写开通资料</p><p>填写完成点击提交，审核会很快，一分钟左右。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956339.jpeg" alt="img">填写开通资料</p><h3 id="生成公钥"><a href="#生成公钥" class="headerlink" title="生成公钥"></a>生成公钥</h3><p>个体商户开通成功后，打开支付宝官网：<a href="https://b.alipay.com/page/home">https://b.alipay.com/page/home</a></p><ul><li>点击账号中心，点击签约管理</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956246.jpeg" alt="img">进入签约管理</p><ul><li>点击查看详情</li></ul><p><img src="https://pic.rmb.bdstatic.com/bjh/down/33813c0e1dc589d136d9b295fa24b3c3.jpeg?x-bce-process=image/watermark,bucket_baidu-rmb-video-cover-1,image_YmpoL25ld3MvNjUzZjZkMjRlMDJiNjdjZWU1NzEzODg0MDNhYTQ0YzQucG5n,type_RlpMYW5UaW5nSGVpU01HQg==,w_49,text_QOWkqei_ueS7peiTnQ==,size_49,x_38,y_38,interval_2,color_FFFFFF,effect_softoutline,shc_000000,blr_2,align_1" alt="img">进入查看详情</p><ul><li>点击自行研发接入</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956207.jpeg" alt="img">进入自行研发接入</p><ul><li>点击网页移动应用，进入详情</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201002293.jpeg" alt="img">网页移动应用</p><ul><li>点击开发设置，点击设置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956773.jpeg" alt="img">设置</p><ol><li>选择接口加签方式</li><li>点击设置</li><li>选择密钥（普通适用）</li><li>下载密钥工具 官网地址：<a href="https://opendocs.alipay.com/common/02kipk">https://opendocs.alipay.com/common/02kipk</a></li><li>选择与你系统对应的版本，安装支付宝开放平台密钥工具</li><li>运行支付宝开放平台密钥工具</li><li>点击生成密钥，可以看到应用公钥和应用私钥，保存下载这两个</li><li>复制支付宝开放平台密钥工具生成的应用公钥</li><li>回到支付宝，在对应位置粘贴应用公钥</li><li>点击确认上传</li><li>下载支付宝公钥</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956689.jpeg" alt="img">设置支付宝公钥</p><h3 id="独角卡后台"><a href="#独角卡后台" class="headerlink" title="独角卡后台"></a>独角卡后台</h3><p>进入独角卡后台，点击支付配置，选择支付宝当面付，编辑支付宝当面付</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201002558.jpeg" alt="img">编辑支付宝当面付</p><ul><li>支付名称填写网页移动应用页面的id（上面复制到记事本的）</li><li>商户key填写网页页面下载的支付宝公钥</li><li>商户密钥填写支付宝密钥工具生成的应用私钥</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304201002681.jpeg" alt="img">配置密钥</p><p>下载下来的应用公钥，应用私钥和支付宝公钥</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304200956233.jpeg" alt="img"></p><blockquote><p>原文链接：<a href="https://baijiahao.baidu.com/s?id=1755777325644896267">https://baijiahao.baidu.com/s?id=1755777325644896267</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 配置 </tag>
            
            <tag> 支付 </tag>
            
            <tag> 支付宝 </tag>
            
            <tag> 当面付 </tag>
            
            <tag> 发卡 </tag>
            
            <tag> 独角数卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Replit部署subconverter（订阅转换）后端</title>
      <link href="/posts/8dd43e1c.html"/>
      <url>/posts/8dd43e1c.html</url>
      
        <content type="html"><![CDATA[<p>在使用Clash的时候，肯定知道Clash是基于yaml的节点配置文件工作的。我们如果去追求方便，去使用在线的订阅转换网页，那么你的节点会有被盗用的风险。这是因为订阅转换站的后端会记录你的个人节点订阅信息。因此，个人建议还是手写配置文件比较保险。但是，如果想确保节点订阅安全，又想追求懒人话使用订阅转换的话，可以考虑自建订阅转换服务。在这篇文章中，我来和大家一起在Replit上部署订阅转换服务</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Replit 账号</li></ul><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><ol><li>打开 Replit 项目链接：<a href="https://replit.com/@misaka-blog/subconverter">https://replit.com/@misaka-blog/subconverter</a> ，点击旁边蓝色的“Fork”按钮</li><li>点击顶上的“Run”按钮，待网页预览页面出现“File not found.”即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191606443.png" alt="img"></p><ol><li>打开订阅转换网页（ <a href="https://acl4ssr-sub.github.io/">https://acl4ssr-sub.github.io/</a> ），后端地址选择本地</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191600029.png" alt="img"></p><ol><li>复制出链接，将<code>http://localhost:25500</code>修改成自己的replit地址即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191600165.png" alt="img"></p><blockquote><p>原文链接：<a href="https://blog.misaka.rest/2023/04/19/replit-subconverter/">https://blog.misaka.rest/2023/04/19/replit-subconverter/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> replit </tag>
            
            <tag> subconverter </tag>
            
            <tag> 订阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql之mysqldump整库备份单表恢复还原</title>
      <link href="/posts/8bda40b2.html"/>
      <url>/posts/8bda40b2.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、需求场景说明"><a href="#一、需求场景说明" class="headerlink" title="一、需求场景说明"></a>一、需求场景说明</h2><p>  日常运维中，我们往往都是整库备份，整库还原。实际工作中会存在需要还原部分表或者单表的情况。例如在开发或者测试环境中，开发人员因为误操作或者测试需要删除或者清空了某个表，我们需要还原这个被删除或者清空的表。为了恢复这个误删表，我们如果使用整库还原会存在2点问题：</p><p>一、直接还原到在用库，可能导致其他表已更新数据被覆盖；</p><p>二、使用临时库整库还原后copy单表会耗时费力（如下图所示，单库整库备份大小将近4G）。实际上我们只需要截取出单表数据，恢复单表即可。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190955099.png" alt="在这里插入图片描述"></p><p>  如何实现整库备份，单表还原的需求场景呢？此博文就是针对此场景进行介绍说明。博文实验环境：</p><ul><li>操作系统：centos7.6</li><li>mysql版本：5.7</li></ul><h2 id="二、单表还原步骤"><a href="#二、单表还原步骤" class="headerlink" title="二、单表还原步骤"></a>二、单表还原步骤</h2><h3 id="1、查看数据库备份文件"><a href="#1、查看数据库备份文件" class="headerlink" title="1、查看数据库备份文件"></a>1、查看数据库备份文件</h3><p>  mysqldump备份的数据实际上就是sql数据导出方式。我们使用cat查看备份的sql文件，可以看到备份工具的版本，数据库版本，数据库名和参数信息等。查看具体内容可以发现导出的数据使用insert into语句存储，不过插入多少行数据，对于文本来说就是一行，而且都包含表名，这个是我们实现单表还原的关键。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190956877.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190956945.png" alt="在这里插入图片描述"></p><p>  为了对比验证单表恢复还原数据的可行性，我们先整库还原了备份数据，耗时1个多小时。其中personchangeinfo表总计9889行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190957548.png" alt="在这里插入图片描述"></p><h3 id="2、使用grep过滤单表数据"><a href="#2、使用grep过滤单表数据" class="headerlink" title="2、使用grep过滤单表数据"></a>2、使用grep过滤单表数据</h3><p>  使用grep过滤需要还原的表数据。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190957279.png" alt="在这里插入图片描述"></p><blockquote><p>[wuhs@s152 tmp]$ cat testdb_all.sql |grep -E ‘INSERT INTO <code>personchangeinfo</code>’ &gt; personchangeinfo1.sql<br>[wuhs@s152 tmp]$ ll -lrt<br>总用量 3934600<br>…<br>-rw-rw-r–. 1 wuhs wuhs 1033114 11月 15 14:39 personchangeinfo1.sql</p></blockquote><h3 id="3、使用sed命令筛出单表数据"><a href="#3、使用sed命令筛出单表数据" class="headerlink" title="3、使用sed命令筛出单表数据"></a>3、使用sed命令筛出单表数据</h3><p>  使用sed -n从整库备份文件中筛查出需要恢复的表数据。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190958876.png" alt="在这里插入图片描述"></p><blockquote><p>[wuhs@s152 tmp]$ sed -n ‘&#x2F;INSERT INTO <code>personchangeinfo</code>&#x2F;p’ testdb_all.sql &gt; personchangeinfo2.sql<br>[wuhs@s152 tmp]$ ll -lrt<br>总用量 3934600<br>…<br>-rw-rw-r–. 1 wuhs wuhs 1033114 11月 15 14:36 personchangeinfo2.sql3 11月 15 14:29 personchangeinfo2.sql</p></blockquote><h3 id="4、创建表结构"><a href="#4、创建表结构" class="headerlink" title="4、创建表结构"></a>4、创建表结构</h3><p>  在备份文件中找到创建表空间语句，并执行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190958981.png" alt="在这里插入图片描述"></p><h3 id="5、单表还原测试"><a href="#5、单表还原测试" class="headerlink" title="5、单表还原测试"></a>5、单表还原测试</h3><p>  我们分别使用grep和sed导出数据进行还原测试，还原结果与整库还原结果一致，说明此方式还原单表可行。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190958149.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304190959098.png" alt="在这里插入图片描述"></p><h2 id="三、通过脚本实现单表还原"><a href="#三、通过脚本实现单表还原" class="headerlink" title="三、通过脚本实现单表还原"></a>三、通过脚本实现单表还原</h2><h3 id="1、脚本内容"><a href="#1、脚本内容" class="headerlink" title="1、脚本内容"></a>1、脚本内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[wuhs@s152 tmp]$ cat onetableimport.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line">#script name: onetableimport.sh</span><br><span class="line">#author: 524627027@qq.com</span><br><span class="line">#用途：此脚本用于从mysqldump整库备份文件中导出单表数据</span><br><span class="line">#使用方式：将整库备份文件重命名为testdb_all.sql,并与此脚本放置在同一个目录下</span><br><span class="line"></span><br><span class="line">#参数定义</span><br><span class="line">workPath=$(cd $(dirname $0); pwd)</span><br><span class="line">t1=&quot;&quot;</span><br><span class="line">tblist=&quot;&quot;</span><br><span class="line">outportfile=$workPath/outport.sh</span><br><span class="line"></span><br><span class="line">#获取数据库表清单</span><br><span class="line">cat testdb_all.sql |grep &quot;CREATE TABLE &quot; &gt; 1.txt</span><br><span class="line">tblist=`awk -F &quot; &quot; &#x27;&#123;print $3&#125;&#x27; 1.txt`</span><br><span class="line">echo &quot;$tblist&quot;</span><br><span class="line">#通过键盘输入需要导出的表</span><br><span class="line">read -p &quot;请输入需要还原的表名(请带符号复制并黏贴):&quot; t1</span><br><span class="line">read -p &quot;请输入导出后文件名：&quot; tname</span><br><span class="line"></span><br><span class="line">#创建单表导出脚本</span><br><span class="line">if [ ! -f $outportfile ]; then</span><br><span class="line">  cat &gt; $outportfile &lt;&lt;EOF</span><br><span class="line">sed -n &#x27;/CREATE TABLE $t1/,/Dumping data for table $t1/p&#x27; testdb_all.sql &gt; $tname.sql</span><br><span class="line">sed -n &#x27;/INSERT INTO $t1/p&#x27; testdb_all.sql &gt;&gt; $tname.sql</span><br><span class="line">EOF</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#执行单表数据导出脚本</span><br><span class="line">chmod u+x $outportfile</span><br><span class="line">sh $outportfile</span><br><span class="line">#结束通知</span><br><span class="line">echo &quot;$tname 数据机构及数据导出完成&quot;</span><br><span class="line">#删除临时文件</span><br><span class="line">rm -rf 1.txt</span><br><span class="line">rm -rf $outportfile</span><br></pre></td></tr></table></figure><h3 id="2、脚本测试"><a href="#2、脚本测试" class="headerlink" title="2、脚本测试"></a>2、脚本测试</h3><blockquote><p>[wuhs@s152 tmp]$ sh onetableimport.sh<br><code>personchangeinfo</code><br>…<br>请输入需要还原的表名(请带符号复制并黏贴):<br>请输入导出后文件名：personchangeinfo<br>personchangeinfo 数据机构及数据导出完成</p></blockquote><h3 id="3、查看导出文件"><a href="#3、查看导出文件" class="headerlink" title="3、查看导出文件"></a>3、查看导出文件</h3><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191000843.png" alt="在这里插入图片描述"></p><h3 id="4、数据恢复测试"><a href="#4、数据恢复测试" class="headerlink" title="4、数据恢复测试"></a>4、数据恢复测试</h3><p>  导出后对比发现数据导出成功，脚本既截取了数据表结构创建sql，也导出了数据内容。</p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304191000078.png" alt="在这里插入图片描述"></p><blockquote><p>原文链接：<a href="https://blog.csdn.net/carefree2005/article/details/127851222">https://blog.csdn.net/carefree2005/article/details/127851222</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> mysql </tag>
            
            <tag> mysqldump </tag>
            
            <tag> 备份 </tag>
            
            <tag> 还原 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启用cloudflare的ssl和二级域名</title>
      <link href="/posts/69e9b14c.html"/>
      <url>/posts/69e9b14c.html</url>
      
        <content type="html"><![CDATA[<h1 id="域名准备"><a href="#域名准备" class="headerlink" title="域名准备"></a>域名准备</h1><p>想要架上二级域名，首先，我们需要一个一级域名……自行在心仪的厂家选购。我比较常用的（价格比较实惠的）是国内的是万网，特价的时候一百多人民币买过十年的。国外的是NameSilo，首年特价很多，.com，.xyz比较实惠，但像.top之类的还是当年万网买得更便宜。（不过拿.top，.cyou之类的便宜域名发邮件比较容易被当成垃圾邮件屏蔽……）</p><p>提醒一下，Freenom的虽然免费，但在那个bug多端的网站申请其实还挺麻烦的，而且实测无法使用LetsEncrypt获取证书（不支持那几个顶级域名）。</p><h1 id="DNS准备"><a href="#DNS准备" class="headerlink" title="DNS准备"></a>DNS准备</h1><p>获得域名后，如果那家的DNS不尽如人意，可以转接其他服务商的DNS，比如Cloudflare。</p><p>在Cloudflare的话，可以这样配置域名：</p><table><thead><tr><th align="left">Type</th><th align="left">Name</th><th align="left">Content</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">你弄到的那个域名，比如mydomain.com</td><td align="left">你的IP(IPv4)</td></tr><tr><td align="left">CNAME</td><td align="left">二级域名，比如blog</td><td align="left">你的主域名，如上面的mydomain.com</td></tr><tr><td align="left">CNAME</td><td align="left">另一个二级域名，如repo</td><td align="left">你的主域名</td></tr><tr><td align="left">CNAME</td><td align="left">其他想要配置的二级域名，如www</td><td align="left">你的主域名</td></tr></tbody></table><p>后面的proxy status显示橙色的云表示已经应用了Cloudflare的CDN，很好，不用管，除非设置的某个子域名是用来直接SSH、FTP服务器的。</p><p>然后，记得在SSL&#x2F;TLS里切换模式到Full（不然在下面的配置中，会让访问在http和https间反复横跳，too many redirections）。<br><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304141001264.png" alt="记得改SSL/TLS模式设置"></p><h1 id="SSL准备"><a href="#SSL准备" class="headerlink" title="SSL准备"></a>SSL准备</h1><p>在有了一个域名的基础上，可以申请LetsEncrypt的域名证书。<br>可以使用<a href="https://github.com/acmesh-official/acme.sh">acme.sh</a></p><p>安装：<code>curl https://get.acme.sh | sh -s email=my@example.com</code><br>其中后面那个email不要用<a href="mailto:&#109;&#x79;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#109;">&#109;&#x79;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#109;</a>，会出错的。</p><p>其他就跟着GitHub的教程来吧，有中文的：<br><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/说明</a></p><p>厂家DNS不给力的记得先换了其他厂家的DNS，不然可以这一步申请证书会超时。</p><blockquote><p>PS：也可以直接使用cloudflare的证书，15年</p></blockquote><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="基础的配置"><a href="#基础的配置" class="headerlink" title="基础的配置"></a>基础的配置</h2><p>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf里，http花括号里确保有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*.conf;</span><br></pre></td></tr></table></figure><p>这样conf.d和sites-enabled目录下.conf后缀名的文件都会被包含进设置。</p><p>sites-enabled目录下，可以每个站点单写一个.conf文件，方便管理。需要关闭某个站点的时候，直接<code>mv the_site_name.conf ../sites-available</code>把文件移走，然后<code>service nginx restart</code>。要开启某个站点就从sites-available移回来，再重启nginx。</p><h2 id="ssl-snippets"><a href="#ssl-snippets" class="headerlink" title="ssl snippets"></a>ssl snippets</h2><p>如果站点很多的话，给ssl配置部分写一个snippet会方便很多。这样，在每个站点的文件中就可以直接引用snippet，不用一遍一遍的重复证书路径、加密等等的设置了。</p><p>每份域名证书都需要一个对应的snippet，泛域名证书的话，可以多个子域名站点共用同一个snippet。</p><blockquote><p>例，申请了 <code>*.mysite.com</code>的证书，并为它写了ssl snippet<br>a.mysite.com<br>b.mysite.com<br>c.mysite.com<br>都可以共用这个snippet</p></blockquote><p>存放一份据说是安全的设置的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># /etc/nginx/snippets/ssl.conf</span><br><span class="line"># 就是个提醒自己的路径啦</span><br><span class="line"></span><br><span class="line">server_tokens   off;</span><br><span class="line">ssl_session_cache        shared:SSL:10m;</span><br><span class="line">ssl_session_timeout      60m;</span><br><span class="line">ssl_session_tickets      on;</span><br><span class="line"></span><br><span class="line"># OCSP stapling</span><br><span class="line"># 证书状态缓存</span><br><span class="line">ssl_stapling             on;</span><br><span class="line">ssl_stapling_verify      on;</span><br><span class="line">resolver                 8.8.4.4 8.8.8.8  valid=300s;</span><br><span class="line">resolver_timeout         10s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Ephemeral Diffie-Hellman key exchange</span><br><span class="line">ssl_dhparam /your_path_to_cert/dhparam.pem;</span><br><span class="line">ssl_ecdh_curve secp384r1; # Requires nginx &gt;= 1.1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># path to ssl certificates</span><br><span class="line">ssl_certificate         /your_path_to_cert/fullchain.cer;</span><br><span class="line">ssl_certificate_key     /you_path_to_cert/&lt;domain&gt;.key;</span><br><span class="line"></span><br><span class="line"># disable TLSv1.0 &amp; TLSv1.1</span><br><span class="line"># 禁用安全性不好的 TLS1.0和1.1</span><br><span class="line">ssl_protocols           TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">ssl_ciphers &quot;ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># headers</span><br><span class="line">add_header  Strict-Transport-Security &quot;max-age=31536000;includeSubDomains;preload&quot;;</span><br><span class="line">add_header  X-Frame-Options  sameorigin;</span><br><span class="line">add_header  Referrer-Policy  strict-origin-when-cross-origin;</span><br><span class="line"> </span><br><span class="line">add_header  X-Content-Type-Options  nosniff;</span><br><span class="line">add_header  x-xss-protection &quot;1; mode=block&quot;;</span><br><span class="line"></span><br><span class="line">add_header Content-Security-Policy &quot;default-src &#x27;self&#x27; *.your_domain.com other_sites.com; script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27; blob: https:; connect-src &#x27;self&#x27; https:; img-src &#x27;self&#x27; data: https: blob:; style-src &#x27;unsafe-inline&#x27; https:; font-src &#x27;self&#x27; https: data:&quot;;</span><br></pre></td></tr></table></figure><p>其中，your_path_to_cert（放证书、秘钥等的路径）和CSP请自行调整。</p><p>DF参数提高到至少2048位（乐意的话4096位也可以哦）：<br><code>openssl dhparam -out /your_path_to_cert/dhparam.pem 2048</code><br>openssl如果没有就apt-get安装</p><p>CSP（Content-Security-Policy）里加入你信任的、需要用到的网站和加载方式，浏览器会把没包含在内的加载内容全都截下来的（F12看network或者console里面）。如果配置完，从HTTPS访问时网站有部分内容不显示或表现不正常，优先查看是否因为CSP被浏览器拦截。</p><h2 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h2><p>站点的模板，每个站点要使用含有对应证书的ssl snippet哦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line">        server_name &lt;your_secondary_domain&gt;.&lt;your_domain&gt;.com; # 不是.com的自己改啦</span><br><span class="line">        return 301 https://$server_name$request_uri; # 如果被以http访问了，转https</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl; # 这个ssl很重要，不写的话可能会有奇奇怪怪的悲剧发生。另外这行是ipv4</span><br><span class="line">        listen [::]:443 ssl; # 这行是ipv6</span><br><span class="line">        server_name &lt;your_secondary_domain&gt;.&lt;your_domain&gt;.com; # 同上</span><br><span class="line">        </span><br><span class="line">        include snippets/ssl.conf; # 上文中写好的对应snippet，或者自己的ssl设置</span><br><span class="line">        </span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:&lt;port_number&gt;/&lt;app_name&gt;; #你要转到哪里</span><br><span class="line">        </span><br><span class="line">        proxy_set_header        Host             $host;</span><br><span class="line">        proxy_set_header        X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_http_version      1.1;</span><br><span class="line">        proxy_set_header        Upgrade          $http_upgrade;</span><br><span class="line">        proxy_set_header        Connection       $http_connection;</span><br><span class="line">        proxy_set_header        Origin           http://$host;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h2><p>配置好之后，<code>nginx -t</code>测试配置。测试通过的话<code>sudo service nginx restart</code>重启就可以看到效果了。不过要刷新ssl证书（比如更新过、或者吊销又重新申请了证书等情况）的话需要<code>sudo service nginx force-reload</code>哟。</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> cloudflare </tag>
            
            <tag> cdn </tag>
            
            <tag> ssl </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Oracle Cloud（甲骨文云）的沙盒，体验其的云服务</title>
      <link href="/posts/22db22cf.html"/>
      <url>/posts/22db22cf.html</url>
      
        <content type="html"><![CDATA[<p>众所周知，甲骨文的服务器对中国大陆实行了严苛的注册制度，从而导致注册大概率失败。如果有人需要体验甲骨文的服务器而苦于注册不成功的话，那该咋办呢？在这期教程中，我来和大家一起使用甲骨文的沙盒，体验甲骨文云的服务。</p><h2 id="准备材料"><a href="#准备材料" class="headerlink" title="准备材料"></a>准备材料</h2><ul><li>Oracle 账户</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>打开这个网站：<a href="https://apexapps.oracle.com/pls/apex/r/dbpm/livelabs/view-workshop?wid=648">https://apexapps.oracle.com/pls/apex/r/dbpm/livelabs/view-workshop?wid=648</a> ，登录自己的Oracle账户。然后点击“Start”启动沙盒</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132049408.png" alt="img"></p><ol start="2"><li>点击底下的绿色按钮，启动沙盒</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132054265.png" alt="img"></p><ol start="3"><li>设置时区，同意协议。然后点击绿色按钮启动沙盒</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132100047.png" alt="img"></p><ol start="4"><li>等待配置沙盒，大概需要2-5分钟的时间</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132055085.png" alt="img"></p><ol start="5"><li>待配置完成后，点击“Launch Workshop”</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132055879.png" alt="img"></p><ol start="6"><li>点击“View Login Info”，然后复制密码，点击“Launch OCI”按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132055780.png" alt="img"></p><ol start="7"><li>可以正常登录到云控制面板</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132049132.png" alt="img"></p><ol start="8"><li>如需延长试用时间，可点击“Extend Workshop Reservation”字样续时。最高可以续到10小时</li></ol><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304132049219.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 教程 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> cloud </tag>
            
            <tag> oracle </tag>
            
            <tag> 甲骨文 </tag>
            
            <tag> 甲骨文云 </tag>
            
            <tag> 沙盒 </tag>
            
            <tag> 体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香港银行开户指南</title>
      <link href="/posts/c22df0be.html"/>
      <url>/posts/c22df0be.html</url>
      
        <content type="html"><![CDATA[<h2 id="中国银行香港"><a href="#中国银行香港" class="headerlink" title="中国银行香港"></a>中国银行香港</h2><p>难度：★<br>所需资料：港澳通行证、入境小白条、内地身份证<br>理财要求：无<br>存款要求：无<br>预约时间：无需预约<br>推荐路线：香港西九龙高铁站，中港城2楼 分行</p><h2 id="招商永隆"><a href="#招商永隆" class="headerlink" title="招商永隆"></a>招商永隆</h2><p>难度：★★<br>所需资料：港澳通行证、入境小白条、内地身份证、地址证明<br>理财要求：无<br>存款要求：存款10000<br>预约时间：提前在 招商永隆预约<br>地址证明：三个月有效地址证明<br>备注：三个月存款低于1万，每个月有100hkd管理费</p><h2 id="众安ZA-Bank（虚拟银行）"><a href="#众安ZA-Bank（虚拟银行）" class="headerlink" title="众安ZA Bank（虚拟银行）"></a>众安ZA Bank（虚拟银行）</h2><p>难度：无<br>所需资料：港澳通行证、内地身份证<br>理财要求：无<br>存款要求：无<br>预约时间：无<br>备注：人在香港，下载ZA Bank的app直接申请</p><blockquote><p>待更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 香港 </tag>
            
            <tag> 银行 </tag>
            
            <tag> 开启 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsServer2022激活</title>
      <link href="/posts/e96d05a4.html"/>
      <url>/posts/e96d05a4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-Server-2022-Datacenter"><a href="#Windows-Server-2022-Datacenter" class="headerlink" title="Windows Server 2022 Datacenter"></a>Windows Server 2022 Datacenter</h1><p>slmgr -ipk WX4NM-KYWYW-QJJR4-XV3QB-6VM33<br>slmgr &#x2F;skms kms.03k.org<br>slmgr -ato<br>slmgr -dlv</p><h1 id="Windows-Server-2022-Standard"><a href="#Windows-Server-2022-Standard" class="headerlink" title="Windows Server 2022 Standard"></a>Windows Server 2022 Standard</h1><p>slmgr -ipk VDYBN-27WPP-V4HQT-9VMD4-VMK7H<br>slmgr &#x2F;skms kms.03k.org<br>slmgr -ato<br>slmgr -dlv</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 激活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一篇示例文章</title>
      <link href="/posts/a6626f42.html"/>
      <url>/posts/a6626f42.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130811174.jpeg" alt="main1"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130810895.jpeg" alt="top_img1"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130810343.jpeg" alt="General 3000x2092 women camera hands"></p><p><img src="https://cdn.jsdelivr.net/gh/liuyesblog/images@main/2023/202304130823798.jpeg" alt="General 3840x2160 Star Trek Star Trek: TOS spaceship vehicle"></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
